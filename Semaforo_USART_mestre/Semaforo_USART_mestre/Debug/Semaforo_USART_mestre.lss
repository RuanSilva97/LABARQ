
Semaforo_USART_mestre.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000019f8  00001a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000226  0080013a  0080013a  00001ac6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ac6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00001b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015d0  00000000  00000000  00001c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000946  00000000  00000000  00003224  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cc9  00000000  00000000  00003b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  00004834  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000685  00000000  00000000  00004b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ac  00000000  00000000  000051e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00005b91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
       4:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__vector_1>
       8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
       c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      14:	0c 94 85 02 	jmp	0x50a	; 0x50a <__vector_5>
      18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      38:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_14>
      3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      48:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      54:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000068 <CHARSET>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf ef       	ldi	r28, 0xFF	; 255
     24e:	d8 e0       	ldi	r29, 0x08	; 8
     250:	de bf       	out	0x3e, r29	; 62
     252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
     254:	11 e0       	ldi	r17, 0x01	; 1
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	e8 ef       	ldi	r30, 0xF8	; 248
     25c:	f9 e1       	ldi	r31, 0x19	; 25
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
     260:	05 90       	lpm	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	aa 33       	cpi	r26, 0x3A	; 58
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
     26a:	23 e0       	ldi	r18, 0x03	; 3
     26c:	aa e3       	ldi	r26, 0x3A	; 58
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
     272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
     274:	a0 36       	cpi	r26, 0x60	; 96
     276:	b2 07       	cpc	r27, r18
     278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
     27a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <main>
     27e:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <_exit>

00000282 <__bad_interrupt>:
     282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <__vector_14>:
		}
	}
}

ISR(TIMER0_COMPA_vect)	// Interrupção do TC0 a cada 1 ms = (64 * (249 + 1)) / 16 MHz
{
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	0f 92       	push	r0
     28e:	11 24       	eor	r1, r1
     290:	8f 93       	push	r24
     292:	9f 93       	push	r25
     294:	af 93       	push	r26
     296:	bf 93       	push	r27
	tempo_ms++;
     298:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tempo_ms>
     29c:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <tempo_ms+0x1>
     2a0:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <tempo_ms+0x2>
     2a4:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <tempo_ms+0x3>
     2a8:	01 96       	adiw	r24, 0x01	; 1
     2aa:	a1 1d       	adc	r26, r1
     2ac:	b1 1d       	adc	r27, r1
     2ae:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <tempo_ms>
     2b2:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <tempo_ms+0x1>
     2b6:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <tempo_ms+0x2>
     2ba:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <tempo_ms+0x3>
}
     2be:	bf 91       	pop	r27
     2c0:	af 91       	pop	r26
     2c2:	9f 91       	pop	r25
     2c4:	8f 91       	pop	r24
     2c6:	0f 90       	pop	r0
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	0f 90       	pop	r0
     2cc:	1f 90       	pop	r1
     2ce:	18 95       	reti

000002d0 <anima_LCD>:
	}
	
}

void anima_LCD(uint8_t t_vermelho, uint8_t t_amarelo, uint8_t t_verde) // Função para animação do Nokia LCD PCD8544
{
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	06 2f       	mov	r16, r22
     2da:	14 2f       	mov	r17, r20
	sprintf(t_0, "%u", t_vermelho);
     2dc:	1f 92       	push	r1
     2de:	8f 93       	push	r24
     2e0:	c5 e0       	ldi	r28, 0x05	; 5
     2e2:	d1 e0       	ldi	r29, 0x01	; 1
     2e4:	df 93       	push	r29
     2e6:	cf 93       	push	r28
     2e8:	84 e5       	ldi	r24, 0x54	; 84
     2ea:	93 e0       	ldi	r25, 0x03	; 3
     2ec:	9f 93       	push	r25
     2ee:	8f 93       	push	r24
     2f0:	0e 94 10 0a 	call	0x1420	; 0x1420 <sprintf>
	sprintf(t_1, "%u", t_amarelo);
     2f4:	1f 92       	push	r1
     2f6:	0f 93       	push	r16
     2f8:	df 93       	push	r29
     2fa:	cf 93       	push	r28
     2fc:	82 e5       	ldi	r24, 0x52	; 82
     2fe:	93 e0       	ldi	r25, 0x03	; 3
     300:	9f 93       	push	r25
     302:	8f 93       	push	r24
     304:	0e 94 10 0a 	call	0x1420	; 0x1420 <sprintf>
	sprintf(t_2, "%u", t_verde);
     308:	1f 92       	push	r1
     30a:	1f 93       	push	r17
     30c:	df 93       	push	r29
     30e:	cf 93       	push	r28
     310:	8a e5       	ldi	r24, 0x5A	; 90
     312:	93 e0       	ldi	r25, 0x03	; 3
     314:	9f 93       	push	r25
     316:	8f 93       	push	r24
     318:	0e 94 10 0a 	call	0x1420	; 0x1420 <sprintf>
	sprintf(freq, "%u", freq_automatico);
     31c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <freq_automatico+0x3>
     320:	8f 93       	push	r24
     322:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <freq_automatico+0x2>
     326:	8f 93       	push	r24
     328:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <freq_automatico+0x1>
     32c:	8f 93       	push	r24
     32e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <freq_automatico>
     332:	8f 93       	push	r24
     334:	df 93       	push	r29
     336:	cf 93       	push	r28
     338:	86 e5       	ldi	r24, 0x56	; 86
     33a:	93 e0       	ldi	r25, 0x03	; 3
     33c:	9f 93       	push	r25
     33e:	8f 93       	push	r24
     340:	0e 94 10 0a 	call	0x1420	; 0x1420 <sprintf>
	sprintf(lux_LDR, "%u", (1023000/ADC) - 1000);
     344:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     348:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     34c:	40 e0       	ldi	r20, 0x00	; 0
     34e:	50 e0       	ldi	r21, 0x00	; 0
     350:	68 e1       	ldi	r22, 0x18	; 24
     352:	7c e9       	ldi	r23, 0x9C	; 156
     354:	8f e0       	ldi	r24, 0x0F	; 15
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__divmodsi4>
     35c:	da 01       	movw	r26, r20
     35e:	c9 01       	movw	r24, r18
     360:	88 5e       	subi	r24, 0xE8	; 232
     362:	93 40       	sbci	r25, 0x03	; 3
     364:	a1 09       	sbc	r26, r1
     366:	b1 09       	sbc	r27, r1
     368:	bf 93       	push	r27
     36a:	af 93       	push	r26
     36c:	9f 93       	push	r25
     36e:	8f 93       	push	r24
     370:	df 93       	push	r29
     372:	cf 93       	push	r28
     374:	8c e5       	ldi	r24, 0x5C	; 92
     376:	93 e0       	ldi	r25, 0x03	; 3
     378:	9f 93       	push	r25
     37a:	8f 93       	push	r24
     37c:	0e 94 10 0a 	call	0x1420	; 0x1420 <sprintf>
	
	nokia_lcd_clear();
     380:	8d b7       	in	r24, 0x3d	; 61
     382:	9e b7       	in	r25, 0x3e	; 62
     384:	82 96       	adiw	r24, 0x22	; 34
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	f8 94       	cli
     38a:	9e bf       	out	0x3e, r25	; 62
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	8d bf       	out	0x3d, r24	; 61
     390:	0e 94 cc 08 	call	0x1198	; 0x1198 <nokia_lcd_clear>
	
	nokia_lcd_set_cursor(48, 0);
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	80 e3       	ldi	r24, 0x30	; 48
     398:	0e 94 a5 09 	call	0x134a	; 0x134a <nokia_lcd_set_cursor>
	nokia_lcd_write_string("|", 2);
     39c:	62 e0       	ldi	r22, 0x02	; 2
     39e:	88 e0       	ldi	r24, 0x08	; 8
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	0e 94 94 09 	call	0x1328	; 0x1328 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(48, 10);
     3a6:	6a e0       	ldi	r22, 0x0A	; 10
     3a8:	80 e3       	ldi	r24, 0x30	; 48
     3aa:	0e 94 a5 09 	call	0x134a	; 0x134a <nokia_lcd_set_cursor>
	nokia_lcd_write_string("|", 2);
     3ae:	62 e0       	ldi	r22, 0x02	; 2
     3b0:	88 e0       	ldi	r24, 0x08	; 8
     3b2:	91 e0       	ldi	r25, 0x01	; 1
     3b4:	0e 94 94 09 	call	0x1328	; 0x1328 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(48, 20);
     3b8:	64 e1       	ldi	r22, 0x14	; 20
     3ba:	80 e3       	ldi	r24, 0x30	; 48
     3bc:	0e 94 a5 09 	call	0x134a	; 0x134a <nokia_lcd_set_cursor>
	nokia_lcd_write_string("|", 2);
     3c0:	62 e0       	ldi	r22, 0x02	; 2
     3c2:	88 e0       	ldi	r24, 0x08	; 8
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	0e 94 94 09 	call	0x1328	; 0x1328 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(48, 30);
     3ca:	6e e1       	ldi	r22, 0x1E	; 30
     3cc:	80 e3       	ldi	r24, 0x30	; 48
     3ce:	0e 94 a5 09 	call	0x134a	; 0x134a <nokia_lcd_set_cursor>
	nokia_lcd_write_string("|", 2);
     3d2:	62 e0       	ldi	r22, 0x02	; 2
     3d4:	88 e0       	ldi	r24, 0x08	; 8
     3d6:	91 e0       	ldi	r25, 0x01	; 1
     3d8:	0e 94 94 09 	call	0x1328	; 0x1328 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(48, 40);
     3dc:	68 e2       	ldi	r22, 0x28	; 40
     3de:	80 e3       	ldi	r24, 0x30	; 48
     3e0:	0e 94 a5 09 	call	0x134a	; 0x134a <nokia_lcd_set_cursor>
	nokia_lcd_write_string("|", 2);
     3e4:	62 e0       	ldi	r22, 0x02	; 2
     3e6:	88 e0       	ldi	r24, 0x08	; 8
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	0e 94 94 09 	call	0x1328	; 0x1328 <nokia_lcd_write_string>
	
	nokia_lcd_set_cursor(0, 0);
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	0e 94 a5 09 	call	0x134a	; 0x134a <nokia_lcd_set_cursor>
	nokia_lcd_write_string("T. Vm:", 1);
     3f6:	61 e0       	ldi	r22, 0x01	; 1
     3f8:	8a e0       	ldi	r24, 0x0A	; 10
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	0e 94 94 09 	call	0x1328	; 0x1328 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(37, 0);
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	85 e2       	ldi	r24, 0x25	; 37
     404:	0e 94 a5 09 	call	0x134a	; 0x134a <nokia_lcd_set_cursor>
	nokia_lcd_write_string(t_0, 1);
     408:	61 e0       	ldi	r22, 0x01	; 1
     40a:	84 e5       	ldi	r24, 0x54	; 84
     40c:	93 e0       	ldi	r25, 0x03	; 3
     40e:	0e 94 94 09 	call	0x1328	; 0x1328 <nokia_lcd_write_string>
	
	nokia_lcd_set_cursor(0, 13);
     412:	6d e0       	ldi	r22, 0x0D	; 13
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	0e 94 a5 09 	call	0x134a	; 0x134a <nokia_lcd_set_cursor>
	nokia_lcd_write_string("T. Am:", 1);
     41a:	61 e0       	ldi	r22, 0x01	; 1
     41c:	81 e1       	ldi	r24, 0x11	; 17
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	0e 94 94 09 	call	0x1328	; 0x1328 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(37, 13);
     424:	6d e0       	ldi	r22, 0x0D	; 13
     426:	85 e2       	ldi	r24, 0x25	; 37
     428:	0e 94 a5 09 	call	0x134a	; 0x134a <nokia_lcd_set_cursor>
	nokia_lcd_write_string(t_1, 1);
     42c:	61 e0       	ldi	r22, 0x01	; 1
     42e:	82 e5       	ldi	r24, 0x52	; 82
     430:	93 e0       	ldi	r25, 0x03	; 3
     432:	0e 94 94 09 	call	0x1328	; 0x1328 <nokia_lcd_write_string>
	
	nokia_lcd_set_cursor(0, 27);
     436:	6b e1       	ldi	r22, 0x1B	; 27
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	0e 94 a5 09 	call	0x134a	; 0x134a <nokia_lcd_set_cursor>
	nokia_lcd_write_string("T. Vd:", 1);
     43e:	61 e0       	ldi	r22, 0x01	; 1
     440:	88 e1       	ldi	r24, 0x18	; 24
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	0e 94 94 09 	call	0x1328	; 0x1328 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(37, 27);
     448:	6b e1       	ldi	r22, 0x1B	; 27
     44a:	85 e2       	ldi	r24, 0x25	; 37
     44c:	0e 94 a5 09 	call	0x134a	; 0x134a <nokia_lcd_set_cursor>
	nokia_lcd_write_string(t_2, 1);
     450:	61 e0       	ldi	r22, 0x01	; 1
     452:	8a e5       	ldi	r24, 0x5A	; 90
     454:	93 e0       	ldi	r25, 0x03	; 3
     456:	0e 94 94 09 	call	0x1328	; 0x1328 <nokia_lcd_write_string>
	
	if(estado == 3 && cont_freq == 1)
     45a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <estado>
     45e:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <estado+0x1>
     462:	03 97       	sbiw	r24, 0x03	; 3
     464:	81 f4       	brne	.+32     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
     466:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
     46a:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__data_end+0x1>
     46e:	01 97       	sbiw	r24, 0x01	; 1
     470:	51 f4       	brne	.+20     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
	{
		nokia_lcd_set_cursor(0, 40);
     472:	68 e2       	ldi	r22, 0x28	; 40
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	0e 94 a5 09 	call	0x134a	; 0x134a <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Modo A:", 1);
     47a:	61 e0       	ldi	r22, 0x01	; 1
     47c:	8f e1       	ldi	r24, 0x1F	; 31
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	0e 94 94 09 	call	0x1328	; 0x1328 <nokia_lcd_write_string>
     484:	09 c0       	rjmp	.+18     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
		
		}else {
		nokia_lcd_set_cursor(0, 40);
     486:	68 e2       	ldi	r22, 0x28	; 40
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	0e 94 a5 09 	call	0x134a	; 0x134a <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Modo M:", 1);
     48e:	61 e0       	ldi	r22, 0x01	; 1
     490:	87 e2       	ldi	r24, 0x27	; 39
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	0e 94 94 09 	call	0x1328	; 0x1328 <nokia_lcd_write_string>
		
	}
	
	nokia_lcd_set_cursor(62, 8);
     498:	68 e0       	ldi	r22, 0x08	; 8
     49a:	8e e3       	ldi	r24, 0x3E	; 62
     49c:	0e 94 a5 09 	call	0x134a	; 0x134a <nokia_lcd_set_cursor>
	nokia_lcd_write_string(lux_LDR, 1);
     4a0:	61 e0       	ldi	r22, 0x01	; 1
     4a2:	8c e5       	ldi	r24, 0x5C	; 92
     4a4:	93 e0       	ldi	r25, 0x03	; 3
     4a6:	0e 94 94 09 	call	0x1328	; 0x1328 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(62, 18);
     4aa:	62 e1       	ldi	r22, 0x12	; 18
     4ac:	8e e3       	ldi	r24, 0x3E	; 62
     4ae:	0e 94 a5 09 	call	0x134a	; 0x134a <nokia_lcd_set_cursor>
	nokia_lcd_write_string("LUX", 1);
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	8f e2       	ldi	r24, 0x2F	; 47
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	0e 94 94 09 	call	0x1328	; 0x1328 <nokia_lcd_write_string>
	
	nokia_lcd_set_cursor(62, 30);
     4bc:	6e e1       	ldi	r22, 0x1E	; 30
     4be:	8e e3       	ldi	r24, 0x3E	; 62
     4c0:	0e 94 a5 09 	call	0x134a	; 0x134a <nokia_lcd_set_cursor>
	nokia_lcd_write_string(freq, 1);
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	86 e5       	ldi	r24, 0x56	; 86
     4c8:	93 e0       	ldi	r25, 0x03	; 3
     4ca:	0e 94 94 09 	call	0x1328	; 0x1328 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(62, 38);
     4ce:	66 e2       	ldi	r22, 0x26	; 38
     4d0:	8e e3       	ldi	r24, 0x3E	; 62
     4d2:	0e 94 a5 09 	call	0x134a	; 0x134a <nokia_lcd_set_cursor>
	nokia_lcd_write_string("c/m", 1);
     4d6:	61 e0       	ldi	r22, 0x01	; 1
     4d8:	83 e3       	ldi	r24, 0x33	; 51
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	0e 94 94 09 	call	0x1328	; 0x1328 <nokia_lcd_write_string>
	
	nokia_lcd_set_cursor(45, 0 + estado * 13);
     4e0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <estado>
     4e4:	6d e0       	ldi	r22, 0x0D	; 13
     4e6:	86 9f       	mul	r24, r22
     4e8:	60 2d       	mov	r22, r0
     4ea:	11 24       	eor	r1, r1
     4ec:	8d e2       	ldi	r24, 0x2D	; 45
     4ee:	0e 94 a5 09 	call	0x134a	; 0x134a <nokia_lcd_set_cursor>
	nokia_lcd_write_string("<", 1);
     4f2:	61 e0       	ldi	r22, 0x01	; 1
     4f4:	87 e3       	ldi	r24, 0x37	; 55
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	0e 94 94 09 	call	0x1328	; 0x1328 <nokia_lcd_write_string>
	
	nokia_lcd_render();
     4fc:	0e 94 aa 09 	call	0x1354	; 0x1354 <nokia_lcd_render>
}
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	1f 91       	pop	r17
     506:	0f 91       	pop	r16
     508:	08 95       	ret

0000050a <__vector_5>:
	tempo_freq_ms++;
	IA_carros();
}

ISR(PCINT2_vect) // Interrupção das portas PD4, PD5 e PD6 que representa os botoes de seleção
{
     50a:	1f 92       	push	r1
     50c:	0f 92       	push	r0
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	0f 92       	push	r0
     512:	11 24       	eor	r1, r1
     514:	2f 93       	push	r18
     516:	3f 93       	push	r19
     518:	4f 93       	push	r20
     51a:	5f 93       	push	r21
     51c:	6f 93       	push	r22
     51e:	7f 93       	push	r23
     520:	8f 93       	push	r24
     522:	9f 93       	push	r25
     524:	af 93       	push	r26
     526:	bf 93       	push	r27
     528:	ef 93       	push	r30
     52a:	ff 93       	push	r31
	// Botao de seleção de estado
	if(!(PIND & (1<<6)))
     52c:	4e 99       	sbic	0x09, 6	; 9
     52e:	3d c0       	rjmp	.+122    	; 0x5aa <__vector_5+0xa0>
	{
		estado ++;
     530:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <estado>
     534:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <estado+0x1>
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <estado+0x1>
     53e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <estado>
		
		// Estrategia para atualizar o LCD caso algo mude
		if (estado == 0)
     542:	89 2b       	or	r24, r25
     544:	41 f4       	brne	.+16     	; 0x556 <__vector_5+0x4c>
		{
			anima_LCD(t_vermelho, t_amarelo, t_verde);
     546:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <t_verde>
     54a:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <t_amarelo>
     54e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <t_vermelho>
     552:	0e 94 68 01 	call	0x2d0	; 0x2d0 <anima_LCD>
		}
		if (estado == 1)
     556:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <estado>
     55a:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <estado+0x1>
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	41 f4       	brne	.+16     	; 0x572 <__vector_5+0x68>
		{
			anima_LCD(t_vermelho, t_amarelo, t_verde);
     562:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <t_verde>
     566:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <t_amarelo>
     56a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <t_vermelho>
     56e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <anima_LCD>
		}
		if (estado == 2)
     572:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <estado>
     576:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <estado+0x1>
     57a:	02 97       	sbiw	r24, 0x02	; 2
     57c:	41 f4       	brne	.+16     	; 0x58e <__vector_5+0x84>
		{
			anima_LCD(t_vermelho, t_amarelo, t_verde);
     57e:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <t_verde>
     582:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <t_amarelo>
     586:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <t_vermelho>
     58a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <anima_LCD>
		}
		if (estado == 3)
     58e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <estado>
     592:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <estado+0x1>
     596:	03 97       	sbiw	r24, 0x03	; 3
     598:	41 f4       	brne	.+16     	; 0x5aa <__vector_5+0xa0>
		{
			anima_LCD(t_vermelho, t_amarelo, t_verde);
     59a:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <t_verde>
     59e:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <t_amarelo>
     5a2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <t_vermelho>
     5a6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <anima_LCD>
		}
		
	}
	
	if (estado > 3)
     5aa:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <estado>
     5ae:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <estado+0x1>
     5b2:	04 97       	sbiw	r24, 0x04	; 4
     5b4:	64 f0       	brlt	.+24     	; 0x5ce <__vector_5+0xc4>
	{
		estado = 0;
     5b6:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <estado+0x1>
     5ba:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <estado>
		anima_LCD(t_vermelho, t_amarelo, t_verde);
     5be:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <t_verde>
     5c2:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <t_amarelo>
     5c6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <t_vermelho>
     5ca:	0e 94 68 01 	call	0x2d0	; 0x2d0 <anima_LCD>
	}
	
	
	// Botão de mudança de tempo para mais
	if(!(PIND & (1<<4)))
     5ce:	4c 99       	sbic	0x09, 4	; 9
     5d0:	73 c0       	rjmp	.+230    	; 0x6b8 <__vector_5+0x1ae>
	{
		if (estado == 0)	// Controla o tempo do vermelho para mais
     5d2:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <estado>
     5d6:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <estado+0x1>
     5da:	89 2b       	or	r24, r25
     5dc:	99 f4       	brne	.+38     	; 0x604 <__vector_5+0xfa>
		{
			if (t_vermelho >= 9)
     5de:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <t_vermelho>
     5e2:	89 30       	cpi	r24, 0x09	; 9
     5e4:	20 f0       	brcs	.+8      	; 0x5ee <__vector_5+0xe4>
			{
				t_vermelho = 9;
     5e6:	89 e0       	ldi	r24, 0x09	; 9
     5e8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <t_vermelho>
     5ec:	03 c0       	rjmp	.+6      	; 0x5f4 <__vector_5+0xea>
				}else {
				t_vermelho ++;
     5ee:	8f 5f       	subi	r24, 0xFF	; 255
     5f0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <t_vermelho>
			}
			
			anima_LCD(t_vermelho, t_amarelo, t_verde);
     5f4:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <t_verde>
     5f8:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <t_amarelo>
     5fc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <t_vermelho>
     600:	0e 94 68 01 	call	0x2d0	; 0x2d0 <anima_LCD>
		}
		
		if (estado == 1)	// Controla o tempo do amarelo para mais
     604:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <estado>
     608:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <estado+0x1>
     60c:	01 97       	sbiw	r24, 0x01	; 1
     60e:	99 f4       	brne	.+38     	; 0x636 <__vector_5+0x12c>
		{
			if (t_amarelo >= 9)
     610:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <t_amarelo>
     614:	89 30       	cpi	r24, 0x09	; 9
     616:	20 f0       	brcs	.+8      	; 0x620 <__vector_5+0x116>
			{
				t_amarelo = 9;
     618:	89 e0       	ldi	r24, 0x09	; 9
     61a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <t_amarelo>
     61e:	03 c0       	rjmp	.+6      	; 0x626 <__vector_5+0x11c>
				}else {
				t_amarelo ++;
     620:	8f 5f       	subi	r24, 0xFF	; 255
     622:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <t_amarelo>
			}
			
			anima_LCD(t_vermelho, t_amarelo, t_verde);
     626:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <t_verde>
     62a:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <t_amarelo>
     62e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <t_vermelho>
     632:	0e 94 68 01 	call	0x2d0	; 0x2d0 <anima_LCD>
		}
		
		if (estado == 2)	// Controla o tempo do verde para mais
     636:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <estado>
     63a:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <estado+0x1>
     63e:	02 97       	sbiw	r24, 0x02	; 2
     640:	99 f4       	brne	.+38     	; 0x668 <__vector_5+0x15e>
		{
			if (t_verde >= 9)
     642:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <t_verde>
     646:	89 30       	cpi	r24, 0x09	; 9
     648:	20 f0       	brcs	.+8      	; 0x652 <__vector_5+0x148>
			{
				t_verde = 9;
     64a:	89 e0       	ldi	r24, 0x09	; 9
     64c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <t_verde>
     650:	03 c0       	rjmp	.+6      	; 0x658 <__vector_5+0x14e>
				}else {
				t_verde ++;
     652:	8f 5f       	subi	r24, 0xFF	; 255
     654:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <t_verde>
			}
			
			anima_LCD(t_vermelho, t_amarelo, t_verde);
     658:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <t_verde>
     65c:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <t_amarelo>
     660:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <t_vermelho>
     664:	0e 94 68 01 	call	0x2d0	; 0x2d0 <anima_LCD>
		}
		
		if (estado == 3)	// Controla o tempo das cores caso esteja no modo automatico
     668:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <estado>
     66c:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <estado+0x1>
     670:	03 97       	sbiw	r24, 0x03	; 3
     672:	11 f5       	brne	.+68     	; 0x6b8 <__vector_5+0x1ae>
		{
			cont_freq = 1;
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
     67c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
			t_verde = (freq_automatico/60) + 1;
     680:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <freq_automatico>
     684:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <freq_automatico+0x1>
     688:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <freq_automatico+0x2>
     68c:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <freq_automatico+0x3>
     690:	2c e3       	ldi	r18, 0x3C	; 60
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	40 e0       	ldi	r20, 0x00	; 0
     696:	50 e0       	ldi	r21, 0x00	; 0
     698:	0e 94 cf 09 	call	0x139e	; 0x139e <__udivmodsi4>
     69c:	41 e0       	ldi	r20, 0x01	; 1
     69e:	42 0f       	add	r20, r18
     6a0:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <t_verde>
			t_vermelho = 10 - t_verde;
     6a4:	8a e0       	ldi	r24, 0x0A	; 10
     6a6:	84 1b       	sub	r24, r20
     6a8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <t_vermelho>
			t_amarelo = 1;
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <t_amarelo>
			
			anima_LCD(t_vermelho, t_amarelo, t_verde);
     6b2:	61 e0       	ldi	r22, 0x01	; 1
     6b4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <anima_LCD>
		}
	}
	
	// Botão de mudança de tempo para menos
	if(!(PIND & (1<<5)))
     6b8:	4d 99       	sbic	0x09, 5	; 9
     6ba:	71 c0       	rjmp	.+226    	; 0x79e <__vector_5+0x294>
	{
		if (estado == 0)	// Controla o tempo do vermelho para menos
     6bc:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <estado>
     6c0:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <estado+0x1>
     6c4:	89 2b       	or	r24, r25
     6c6:	99 f4       	brne	.+38     	; 0x6ee <__vector_5+0x1e4>
		{
			if (t_vermelho <= 1)
     6c8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <t_vermelho>
     6cc:	82 30       	cpi	r24, 0x02	; 2
     6ce:	20 f4       	brcc	.+8      	; 0x6d8 <__vector_5+0x1ce>
			{
				t_vermelho = 1;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <t_vermelho>
     6d6:	03 c0       	rjmp	.+6      	; 0x6de <__vector_5+0x1d4>
				}else {
				t_vermelho --;
     6d8:	81 50       	subi	r24, 0x01	; 1
     6da:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <t_vermelho>
			}
			
			anima_LCD(t_vermelho, t_amarelo, t_verde);
     6de:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <t_verde>
     6e2:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <t_amarelo>
     6e6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <t_vermelho>
     6ea:	0e 94 68 01 	call	0x2d0	; 0x2d0 <anima_LCD>
		}
		
		if (estado == 1)	// Controla o tempo do amarelo para menos
     6ee:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <estado>
     6f2:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <estado+0x1>
     6f6:	01 97       	sbiw	r24, 0x01	; 1
     6f8:	99 f4       	brne	.+38     	; 0x720 <__vector_5+0x216>
		{
			if (t_amarelo <= 1)
     6fa:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <t_amarelo>
     6fe:	82 30       	cpi	r24, 0x02	; 2
     700:	20 f4       	brcc	.+8      	; 0x70a <__vector_5+0x200>
			{
				t_amarelo = 1;
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <t_amarelo>
     708:	03 c0       	rjmp	.+6      	; 0x710 <__vector_5+0x206>
				}else {
				t_amarelo --;
     70a:	81 50       	subi	r24, 0x01	; 1
     70c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <t_amarelo>
			}
			
			anima_LCD(t_vermelho, t_amarelo, t_verde);
     710:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <t_verde>
     714:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <t_amarelo>
     718:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <t_vermelho>
     71c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <anima_LCD>
		}
		
		if (estado == 2)	// Controla o tempo do verde para menos
     720:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <estado>
     724:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <estado+0x1>
     728:	02 97       	sbiw	r24, 0x02	; 2
     72a:	99 f4       	brne	.+38     	; 0x752 <__vector_5+0x248>
		{
			if (t_verde <= 1)
     72c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <t_verde>
     730:	82 30       	cpi	r24, 0x02	; 2
     732:	20 f4       	brcc	.+8      	; 0x73c <__vector_5+0x232>
			{
				t_verde = 1;
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <t_verde>
     73a:	03 c0       	rjmp	.+6      	; 0x742 <__vector_5+0x238>
				}else {
				t_verde --;
     73c:	81 50       	subi	r24, 0x01	; 1
     73e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <t_verde>
			}
			
			anima_LCD(t_vermelho, t_amarelo, t_verde);
     742:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <t_verde>
     746:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <t_amarelo>
     74a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <t_vermelho>
     74e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <anima_LCD>
		}
		
		if (estado == 3)	// Controla o tempo das cores caso esteja no modo automatico
     752:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <estado>
     756:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <estado+0x1>
     75a:	03 97       	sbiw	r24, 0x03	; 3
     75c:	01 f5       	brne	.+64     	; 0x79e <__vector_5+0x294>
		{
			cont_freq = 0;
     75e:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <__data_end+0x1>
     762:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
			t_verde = (freq_automatico/60) + 1;
     766:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <freq_automatico>
     76a:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <freq_automatico+0x1>
     76e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <freq_automatico+0x2>
     772:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <freq_automatico+0x3>
     776:	2c e3       	ldi	r18, 0x3C	; 60
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	40 e0       	ldi	r20, 0x00	; 0
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	0e 94 cf 09 	call	0x139e	; 0x139e <__udivmodsi4>
     782:	41 e0       	ldi	r20, 0x01	; 1
     784:	42 0f       	add	r20, r18
     786:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <t_verde>
			t_vermelho = 10 - t_verde;
     78a:	8a e0       	ldi	r24, 0x0A	; 10
     78c:	84 1b       	sub	r24, r20
     78e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <t_vermelho>
			t_amarelo = 1;
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <t_amarelo>
			
			anima_LCD(t_vermelho, t_amarelo, t_verde);
     798:	61 e0       	ldi	r22, 0x01	; 1
     79a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <anima_LCD>
		}
	}
}
     79e:	ff 91       	pop	r31
     7a0:	ef 91       	pop	r30
     7a2:	bf 91       	pop	r27
     7a4:	af 91       	pop	r26
     7a6:	9f 91       	pop	r25
     7a8:	8f 91       	pop	r24
     7aa:	7f 91       	pop	r23
     7ac:	6f 91       	pop	r22
     7ae:	5f 91       	pop	r21
     7b0:	4f 91       	pop	r20
     7b2:	3f 91       	pop	r19
     7b4:	2f 91       	pop	r18
     7b6:	0f 90       	pop	r0
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	0f 90       	pop	r0
     7bc:	1f 90       	pop	r1
     7be:	18 95       	reti

000007c0 <IA_carros>:
	
	nokia_lcd_render();
}

void IA_carros() // Função que faz a "contagem" dos carros
{
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
	if((tempo_ms - tempo_freq_anterior_ms) >= 5000)
     7c4:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <tempo_ms>
     7c8:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <tempo_ms+0x1>
     7cc:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <tempo_ms+0x2>
     7d0:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <tempo_ms+0x3>
     7d4:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <tempo_freq_anterior_ms>
     7d8:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <tempo_freq_anterior_ms+0x1>
     7dc:	a0 91 44 01 	lds	r26, 0x0144	; 0x800144 <tempo_freq_anterior_ms+0x2>
     7e0:	b0 91 45 01 	lds	r27, 0x0145	; 0x800145 <tempo_freq_anterior_ms+0x3>
     7e4:	8a 01       	movw	r16, r20
     7e6:	9b 01       	movw	r18, r22
     7e8:	08 1b       	sub	r16, r24
     7ea:	19 0b       	sbc	r17, r25
     7ec:	2a 0b       	sbc	r18, r26
     7ee:	3b 0b       	sbc	r19, r27
     7f0:	d9 01       	movw	r26, r18
     7f2:	c8 01       	movw	r24, r16
     7f4:	88 38       	cpi	r24, 0x88	; 136
     7f6:	93 41       	sbci	r25, 0x13	; 19
     7f8:	a1 05       	cpc	r26, r1
     7fa:	b1 05       	cpc	r27, r1
     7fc:	68 f1       	brcs	.+90     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
	{
		freq_automatico = conta_carro * 12;
     7fe:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <conta_carro>
     802:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <conta_carro+0x1>
     806:	9c 01       	movw	r18, r24
     808:	22 0f       	add	r18, r18
     80a:	33 1f       	adc	r19, r19
     80c:	82 0f       	add	r24, r18
     80e:	93 1f       	adc	r25, r19
     810:	88 0f       	add	r24, r24
     812:	99 1f       	adc	r25, r25
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	09 2e       	mov	r0, r25
     81a:	00 0c       	add	r0, r0
     81c:	aa 0b       	sbc	r26, r26
     81e:	bb 0b       	sbc	r27, r27
     820:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <freq_automatico>
     824:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <freq_automatico+0x1>
     828:	a0 93 40 01 	sts	0x0140, r26	; 0x800140 <freq_automatico+0x2>
     82c:	b0 93 41 01 	sts	0x0141, r27	; 0x800141 <freq_automatico+0x3>
		tempo_freq_anterior_ms = tempo_ms;
     830:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <tempo_freq_anterior_ms>
     834:	50 93 43 01 	sts	0x0143, r21	; 0x800143 <tempo_freq_anterior_ms+0x1>
     838:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <tempo_freq_anterior_ms+0x2>
     83c:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <tempo_freq_anterior_ms+0x3>
		conta_carro = 0;
     840:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <conta_carro+0x1>
     844:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <conta_carro>
		anima_LCD(t_vermelho, t_amarelo, t_verde);
     848:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <t_verde>
     84c:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <t_amarelo>
     850:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <t_vermelho>
     854:	0e 94 68 01 	call	0x2d0	; 0x2d0 <anima_LCD>
	}
}
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	08 95       	ret

0000085e <__vector_1>:
//-------------------------------------------------------------------------------------------------------------------------------------------------

// Interrupções

ISR(INT0_vect) // Interrupção da porta PD2 que representa a entrada do clock, que simula os carros
{
     85e:	1f 92       	push	r1
     860:	0f 92       	push	r0
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	0f 92       	push	r0
     866:	11 24       	eor	r1, r1
     868:	2f 93       	push	r18
     86a:	3f 93       	push	r19
     86c:	4f 93       	push	r20
     86e:	5f 93       	push	r21
     870:	6f 93       	push	r22
     872:	7f 93       	push	r23
     874:	8f 93       	push	r24
     876:	9f 93       	push	r25
     878:	af 93       	push	r26
     87a:	bf 93       	push	r27
     87c:	ef 93       	push	r30
     87e:	ff 93       	push	r31
	conta_carro++;
     880:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <conta_carro>
     884:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <conta_carro+0x1>
     888:	01 96       	adiw	r24, 0x01	; 1
     88a:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <conta_carro+0x1>
     88e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <conta_carro>
	tempo_freq_ms++;
     892:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <tempo_freq_ms>
     896:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <tempo_freq_ms+0x1>
     89a:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <tempo_freq_ms+0x2>
     89e:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <tempo_freq_ms+0x3>
     8a2:	01 96       	adiw	r24, 0x01	; 1
     8a4:	a1 1d       	adc	r26, r1
     8a6:	b1 1d       	adc	r27, r1
     8a8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <tempo_freq_ms>
     8ac:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <tempo_freq_ms+0x1>
     8b0:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <tempo_freq_ms+0x2>
     8b4:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <tempo_freq_ms+0x3>
	IA_carros();
     8b8:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <IA_carros>
}
     8bc:	ff 91       	pop	r31
     8be:	ef 91       	pop	r30
     8c0:	bf 91       	pop	r27
     8c2:	af 91       	pop	r26
     8c4:	9f 91       	pop	r25
     8c6:	8f 91       	pop	r24
     8c8:	7f 91       	pop	r23
     8ca:	6f 91       	pop	r22
     8cc:	5f 91       	pop	r21
     8ce:	4f 91       	pop	r20
     8d0:	3f 91       	pop	r19
     8d2:	2f 91       	pop	r18
     8d4:	0f 90       	pop	r0
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	0f 90       	pop	r0
     8da:	1f 90       	pop	r1
     8dc:	18 95       	reti

000008de <leitura_LDR>:
	}
}

void leitura_LDR() // Função que faz a leitura do LDR a cada 500ms e aciona a lampada
{
	if((tempo_ms - tempo_LUX_ms) >= 500)
     8de:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tempo_ms>
     8e2:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <tempo_ms+0x1>
     8e6:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <tempo_ms+0x2>
     8ea:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <tempo_ms+0x3>
     8ee:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <tempo_LUX_ms>
     8f2:	50 91 4b 01 	lds	r21, 0x014B	; 0x80014b <tempo_LUX_ms+0x1>
     8f6:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <tempo_LUX_ms+0x2>
     8fa:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <tempo_LUX_ms+0x3>
     8fe:	84 1b       	sub	r24, r20
     900:	95 0b       	sbc	r25, r21
     902:	a6 0b       	sbc	r26, r22
     904:	b7 0b       	sbc	r27, r23
     906:	84 3f       	cpi	r24, 0xF4	; 244
     908:	91 40       	sbci	r25, 0x01	; 1
     90a:	a1 05       	cpc	r26, r1
     90c:	b1 05       	cpc	r27, r1
     90e:	08 f4       	brcc	.+2      	; 0x912 <__stack+0x13>
     910:	65 c0       	rjmp	.+202    	; 0x9dc <__stack+0xdd>
	{
		if((((1023000/ADC) - 1000) <= 300) && ((!(PINC & (1<<6))) || (freq_automatico > 0)))
     912:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     916:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     91a:	40 e0       	ldi	r20, 0x00	; 0
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	68 e1       	ldi	r22, 0x18	; 24
     920:	7c e9       	ldi	r23, 0x9C	; 156
     922:	8f e0       	ldi	r24, 0x0F	; 15
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__divmodsi4>
     92a:	da 01       	movw	r26, r20
     92c:	c9 01       	movw	r24, r18
     92e:	88 5e       	subi	r24, 0xE8	; 232
     930:	93 40       	sbci	r25, 0x03	; 3
     932:	a1 09       	sbc	r26, r1
     934:	b1 09       	sbc	r27, r1
     936:	8d 32       	cpi	r24, 0x2D	; 45
     938:	91 40       	sbci	r25, 0x01	; 1
     93a:	a1 05       	cpc	r26, r1
     93c:	b1 05       	cpc	r27, r1
     93e:	94 f4       	brge	.+36     	; 0x964 <__stack+0x65>
     940:	36 9b       	sbis	0x06, 6	; 6
     942:	0c c0       	rjmp	.+24     	; 0x95c <__stack+0x5d>
     944:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <freq_automatico>
     948:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <freq_automatico+0x1>
     94c:	a0 91 40 01 	lds	r26, 0x0140	; 0x800140 <freq_automatico+0x2>
     950:	b0 91 41 01 	lds	r27, 0x0141	; 0x800141 <freq_automatico+0x3>
     954:	89 2b       	or	r24, r25
     956:	8a 2b       	or	r24, r26
     958:	8b 2b       	or	r24, r27
     95a:	21 f0       	breq	.+8      	; 0x964 <__stack+0x65>
		OCR2B = 250;
     95c:	8a ef       	ldi	r24, 0xFA	; 250
     95e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     962:	2c c0       	rjmp	.+88     	; 0x9bc <__stack+0xbd>
		
		else if((((1023000/ADC) - 1000) <= 300) &&  !(!(PINC & (1<<6)) || (freq_automatico > 0)))
     964:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     968:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     96c:	40 e0       	ldi	r20, 0x00	; 0
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	68 e1       	ldi	r22, 0x18	; 24
     972:	7c e9       	ldi	r23, 0x9C	; 156
     974:	8f e0       	ldi	r24, 0x0F	; 15
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__divmodsi4>
     97c:	da 01       	movw	r26, r20
     97e:	c9 01       	movw	r24, r18
     980:	88 5e       	subi	r24, 0xE8	; 232
     982:	93 40       	sbci	r25, 0x03	; 3
     984:	a1 09       	sbc	r26, r1
     986:	b1 09       	sbc	r27, r1
     988:	8d 32       	cpi	r24, 0x2D	; 45
     98a:	91 40       	sbci	r25, 0x01	; 1
     98c:	a1 05       	cpc	r26, r1
     98e:	b1 05       	cpc	r27, r1
     990:	94 f4       	brge	.+36     	; 0x9b6 <__stack+0xb7>
     992:	36 9b       	sbis	0x06, 6	; 6
     994:	10 c0       	rjmp	.+32     	; 0x9b6 <__stack+0xb7>
     996:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <freq_automatico>
     99a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <freq_automatico+0x1>
     99e:	a0 91 40 01 	lds	r26, 0x0140	; 0x800140 <freq_automatico+0x2>
     9a2:	b0 91 41 01 	lds	r27, 0x0141	; 0x800141 <freq_automatico+0x3>
     9a6:	89 2b       	or	r24, r25
     9a8:	8a 2b       	or	r24, r26
     9aa:	8b 2b       	or	r24, r27
     9ac:	21 f4       	brne	.+8      	; 0x9b6 <__stack+0xb7>
		OCR2B = 80;
     9ae:	80 e5       	ldi	r24, 0x50	; 80
     9b0:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     9b4:	03 c0       	rjmp	.+6      	; 0x9bc <__stack+0xbd>
		
		else
		OCR2B = 1;
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
		
		tempo_LUX_ms = tempo_ms;
     9bc:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tempo_ms>
     9c0:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <tempo_ms+0x1>
     9c4:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <tempo_ms+0x2>
     9c8:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <tempo_ms+0x3>
     9cc:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <tempo_LUX_ms>
     9d0:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <tempo_LUX_ms+0x1>
     9d4:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <tempo_LUX_ms+0x2>
     9d8:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <tempo_LUX_ms+0x3>
	}
	anima_LCD(t_vermelho, t_amarelo, t_verde);
     9dc:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <t_verde>
     9e0:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <t_amarelo>
     9e4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <t_vermelho>
     9e8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <anima_LCD>
     9ec:	08 95       	ret

000009ee <USART_Transmit>:
}

void USART_Transmit(unsigned char data)
{
	while(!( UCSR0A & (1<<UDRE0))); // Espera a limpeza do registrador de transmissão 
     9ee:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     9f2:	95 ff       	sbrs	r25, 5
     9f4:	fc cf       	rjmp	.-8      	; 0x9ee <USART_Transmit>
	UDR0 = data;					// Coloca o dado no registrador e o envia
     9f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     9fa:	08 95       	ret

000009fc <liga_vermelho>:
	
}

void liga_vermelho() // Função para habilitação da cor vermelha
{
	if(flag == 1){
     9fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a00:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a04:	01 97       	sbiw	r24, 0x01	; 1
     a06:	f1 f4       	brne	.+60     	; 0xa44 <liga_vermelho+0x48>
		PORTB = 0b11110000; //Pinos PB4...7 em nivel alto
     a08:	80 ef       	ldi	r24, 0xF0	; 240
     a0a:	85 b9       	out	0x05, r24	; 5
		USART_Transmit(6);
     a0c:	86 e0       	ldi	r24, 0x06	; 6
     a0e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <USART_Transmit>
		tempo_ms_anterior = tempo_ms;
     a12:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tempo_ms>
     a16:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <tempo_ms+0x1>
     a1a:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <tempo_ms+0x2>
     a1e:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <tempo_ms+0x3>
     a22:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <tempo_ms_anterior>
     a26:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <tempo_ms_anterior+0x1>
     a2a:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <tempo_ms_anterior+0x2>
     a2e:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <tempo_ms_anterior+0x3>
		flag ++;
     a32:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a36:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a3a:	01 96       	adiw	r24, 0x01	; 1
     a3c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a40:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if((tempo_ms - tempo_ms_anterior) >= 250*t_vermelho && flag == 2){
     a44:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <tempo_ms>
     a48:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <tempo_ms+0x1>
     a4c:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <tempo_ms+0x2>
     a50:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <tempo_ms+0x3>
     a54:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <tempo_ms_anterior>
     a58:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <tempo_ms_anterior+0x1>
     a5c:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <tempo_ms_anterior+0x2>
     a60:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <tempo_ms_anterior+0x3>
     a64:	48 1b       	sub	r20, r24
     a66:	59 0b       	sbc	r21, r25
     a68:	6a 0b       	sbc	r22, r26
     a6a:	7b 0b       	sbc	r23, r27
     a6c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <t_vermelho>
     a70:	2a ef       	ldi	r18, 0xFA	; 250
     a72:	82 9f       	mul	r24, r18
     a74:	c0 01       	movw	r24, r0
     a76:	11 24       	eor	r1, r1
     a78:	09 2e       	mov	r0, r25
     a7a:	00 0c       	add	r0, r0
     a7c:	aa 0b       	sbc	r26, r26
     a7e:	bb 0b       	sbc	r27, r27
     a80:	48 17       	cp	r20, r24
     a82:	59 07       	cpc	r21, r25
     a84:	6a 07       	cpc	r22, r26
     a86:	7b 07       	cpc	r23, r27
     a88:	20 f1       	brcs	.+72     	; 0xad2 <liga_vermelho+0xd6>
     a8a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a8e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a92:	02 97       	sbiw	r24, 0x02	; 2
     a94:	f1 f4       	brne	.+60     	; 0xad2 <liga_vermelho+0xd6>
		PORTB = 0b01110000; //Pinos PB4...6 em nivel alto
     a96:	80 e7       	ldi	r24, 0x70	; 112
     a98:	85 b9       	out	0x05, r24	; 5
		USART_Transmit(7);
     a9a:	87 e0       	ldi	r24, 0x07	; 7
     a9c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <USART_Transmit>
		tempo_ms_anterior = tempo_ms;
     aa0:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tempo_ms>
     aa4:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <tempo_ms+0x1>
     aa8:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <tempo_ms+0x2>
     aac:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <tempo_ms+0x3>
     ab0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <tempo_ms_anterior>
     ab4:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <tempo_ms_anterior+0x1>
     ab8:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <tempo_ms_anterior+0x2>
     abc:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <tempo_ms_anterior+0x3>
		flag ++;
     ac0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     ac4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ac8:	01 96       	adiw	r24, 0x01	; 1
     aca:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ace:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if((tempo_ms - tempo_ms_anterior) >= 250*t_vermelho && flag == 3){
     ad2:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <tempo_ms>
     ad6:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <tempo_ms+0x1>
     ada:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <tempo_ms+0x2>
     ade:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <tempo_ms+0x3>
     ae2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <tempo_ms_anterior>
     ae6:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <tempo_ms_anterior+0x1>
     aea:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <tempo_ms_anterior+0x2>
     aee:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <tempo_ms_anterior+0x3>
     af2:	48 1b       	sub	r20, r24
     af4:	59 0b       	sbc	r21, r25
     af6:	6a 0b       	sbc	r22, r26
     af8:	7b 0b       	sbc	r23, r27
     afa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <t_vermelho>
     afe:	2a ef       	ldi	r18, 0xFA	; 250
     b00:	82 9f       	mul	r24, r18
     b02:	c0 01       	movw	r24, r0
     b04:	11 24       	eor	r1, r1
     b06:	09 2e       	mov	r0, r25
     b08:	00 0c       	add	r0, r0
     b0a:	aa 0b       	sbc	r26, r26
     b0c:	bb 0b       	sbc	r27, r27
     b0e:	48 17       	cp	r20, r24
     b10:	59 07       	cpc	r21, r25
     b12:	6a 07       	cpc	r22, r26
     b14:	7b 07       	cpc	r23, r27
     b16:	20 f1       	brcs	.+72     	; 0xb60 <liga_vermelho+0x164>
     b18:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     b1c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b20:	03 97       	sbiw	r24, 0x03	; 3
     b22:	f1 f4       	brne	.+60     	; 0xb60 <liga_vermelho+0x164>
		PORTB = 0b00110000; //Pinos PB4...5 em nivel alto
     b24:	80 e3       	ldi	r24, 0x30	; 48
     b26:	85 b9       	out	0x05, r24	; 5
		USART_Transmit(7);
     b28:	87 e0       	ldi	r24, 0x07	; 7
     b2a:	0e 94 f7 04 	call	0x9ee	; 0x9ee <USART_Transmit>
		tempo_ms_anterior = tempo_ms;
     b2e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tempo_ms>
     b32:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <tempo_ms+0x1>
     b36:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <tempo_ms+0x2>
     b3a:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <tempo_ms+0x3>
     b3e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <tempo_ms_anterior>
     b42:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <tempo_ms_anterior+0x1>
     b46:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <tempo_ms_anterior+0x2>
     b4a:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <tempo_ms_anterior+0x3>
		flag ++;
     b4e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     b52:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b5c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if((tempo_ms - tempo_ms_anterior) >= 250*t_vermelho && flag == 4){
     b60:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <tempo_ms>
     b64:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <tempo_ms+0x1>
     b68:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <tempo_ms+0x2>
     b6c:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <tempo_ms+0x3>
     b70:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <tempo_ms_anterior>
     b74:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <tempo_ms_anterior+0x1>
     b78:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <tempo_ms_anterior+0x2>
     b7c:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <tempo_ms_anterior+0x3>
     b80:	48 1b       	sub	r20, r24
     b82:	59 0b       	sbc	r21, r25
     b84:	6a 0b       	sbc	r22, r26
     b86:	7b 0b       	sbc	r23, r27
     b88:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <t_vermelho>
     b8c:	2a ef       	ldi	r18, 0xFA	; 250
     b8e:	82 9f       	mul	r24, r18
     b90:	c0 01       	movw	r24, r0
     b92:	11 24       	eor	r1, r1
     b94:	09 2e       	mov	r0, r25
     b96:	00 0c       	add	r0, r0
     b98:	aa 0b       	sbc	r26, r26
     b9a:	bb 0b       	sbc	r27, r27
     b9c:	48 17       	cp	r20, r24
     b9e:	59 07       	cpc	r21, r25
     ba0:	6a 07       	cpc	r22, r26
     ba2:	7b 07       	cpc	r23, r27
     ba4:	20 f1       	brcs	.+72     	; 0xbee <liga_vermelho+0x1f2>
     ba6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     baa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     bae:	04 97       	sbiw	r24, 0x04	; 4
     bb0:	f1 f4       	brne	.+60     	; 0xbee <liga_vermelho+0x1f2>
		PORTB = 0b00010000; //Pinos PB4     em nivel alto
     bb2:	80 e1       	ldi	r24, 0x10	; 16
     bb4:	85 b9       	out	0x05, r24	; 5
		USART_Transmit(8);
     bb6:	88 e0       	ldi	r24, 0x08	; 8
     bb8:	0e 94 f7 04 	call	0x9ee	; 0x9ee <USART_Transmit>
		tempo_ms_anterior = tempo_ms;
     bbc:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tempo_ms>
     bc0:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <tempo_ms+0x1>
     bc4:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <tempo_ms+0x2>
     bc8:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <tempo_ms+0x3>
     bcc:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <tempo_ms_anterior>
     bd0:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <tempo_ms_anterior+0x1>
     bd4:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <tempo_ms_anterior+0x2>
     bd8:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <tempo_ms_anterior+0x3>
		flag ++;
     bdc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     be0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     bea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if((tempo_ms - tempo_ms_anterior) >= 250*t_vermelho && flag == 5){
     bee:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <tempo_ms>
     bf2:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <tempo_ms+0x1>
     bf6:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <tempo_ms+0x2>
     bfa:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <tempo_ms+0x3>
     bfe:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <tempo_ms_anterior>
     c02:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <tempo_ms_anterior+0x1>
     c06:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <tempo_ms_anterior+0x2>
     c0a:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <tempo_ms_anterior+0x3>
     c0e:	48 1b       	sub	r20, r24
     c10:	59 0b       	sbc	r21, r25
     c12:	6a 0b       	sbc	r22, r26
     c14:	7b 0b       	sbc	r23, r27
     c16:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <t_vermelho>
     c1a:	2a ef       	ldi	r18, 0xFA	; 250
     c1c:	82 9f       	mul	r24, r18
     c1e:	c0 01       	movw	r24, r0
     c20:	11 24       	eor	r1, r1
     c22:	09 2e       	mov	r0, r25
     c24:	00 0c       	add	r0, r0
     c26:	aa 0b       	sbc	r26, r26
     c28:	bb 0b       	sbc	r27, r27
     c2a:	48 17       	cp	r20, r24
     c2c:	59 07       	cpc	r21, r25
     c2e:	6a 07       	cpc	r22, r26
     c30:	7b 07       	cpc	r23, r27
     c32:	18 f1       	brcs	.+70     	; 0xc7a <liga_vermelho+0x27e>
     c34:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c38:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c3c:	05 97       	sbiw	r24, 0x05	; 5
     c3e:	e9 f4       	brne	.+58     	; 0xc7a <liga_vermelho+0x27e>
		PORTB = 0b00000000; //Pinos PB4...7 em nivel baixo
     c40:	15 b8       	out	0x05, r1	; 5
		USART_Transmit(9);
     c42:	89 e0       	ldi	r24, 0x09	; 9
     c44:	0e 94 f7 04 	call	0x9ee	; 0x9ee <USART_Transmit>
		tempo_ms_anterior = tempo_ms;
     c48:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tempo_ms>
     c4c:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <tempo_ms+0x1>
     c50:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <tempo_ms+0x2>
     c54:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <tempo_ms+0x3>
     c58:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <tempo_ms_anterior>
     c5c:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <tempo_ms_anterior+0x1>
     c60:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <tempo_ms_anterior+0x2>
     c64:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <tempo_ms_anterior+0x3>
		flag ++;
     c68:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c6c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c70:	01 96       	adiw	r24, 0x01	; 1
     c72:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c76:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     c7a:	08 95       	ret

00000c7c <liga_amarelo>:
	
}

void liga_amarelo() // Função para habilitação da cor amarela
{
	if(flag == 11){
     c7c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c80:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c84:	0b 97       	sbiw	r24, 0x0b	; 11
     c86:	f9 f4       	brne	.+62     	; 0xcc6 <liga_amarelo+0x4a>
		PORTD  |= (1<<7);  //Pinos PD7 em nivel alto
     c88:	8b b1       	in	r24, 0x0b	; 11
     c8a:	80 68       	ori	r24, 0x80	; 128
     c8c:	8b b9       	out	0x0b, r24	; 11
		USART_Transmit(5);
     c8e:	85 e0       	ldi	r24, 0x05	; 5
     c90:	0e 94 f7 04 	call	0x9ee	; 0x9ee <USART_Transmit>
		tempo_ms_anterior = tempo_ms;
     c94:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tempo_ms>
     c98:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <tempo_ms+0x1>
     c9c:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <tempo_ms+0x2>
     ca0:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <tempo_ms+0x3>
     ca4:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <tempo_ms_anterior>
     ca8:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <tempo_ms_anterior+0x1>
     cac:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <tempo_ms_anterior+0x2>
     cb0:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <tempo_ms_anterior+0x3>
		flag ++;
     cb4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     cb8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     cbc:	01 96       	adiw	r24, 0x01	; 1
     cbe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     cc2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if((tempo_ms - tempo_ms_anterior) >= t_amarelo*1000 && flag == 12){
     cc6:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <tempo_ms>
     cca:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <tempo_ms+0x1>
     cce:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <tempo_ms+0x2>
     cd2:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <tempo_ms+0x3>
     cd6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <tempo_ms_anterior>
     cda:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <tempo_ms_anterior+0x1>
     cde:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <tempo_ms_anterior+0x2>
     ce2:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <tempo_ms_anterior+0x3>
     ce6:	48 1b       	sub	r20, r24
     ce8:	59 0b       	sbc	r21, r25
     cea:	6a 0b       	sbc	r22, r26
     cec:	7b 0b       	sbc	r23, r27
     cee:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <t_amarelo>
     cf2:	28 ee       	ldi	r18, 0xE8	; 232
     cf4:	33 e0       	ldi	r19, 0x03	; 3
     cf6:	e2 9f       	mul	r30, r18
     cf8:	c0 01       	movw	r24, r0
     cfa:	e3 9f       	mul	r30, r19
     cfc:	90 0d       	add	r25, r0
     cfe:	11 24       	eor	r1, r1
     d00:	09 2e       	mov	r0, r25
     d02:	00 0c       	add	r0, r0
     d04:	aa 0b       	sbc	r26, r26
     d06:	bb 0b       	sbc	r27, r27
     d08:	48 17       	cp	r20, r24
     d0a:	59 07       	cpc	r21, r25
     d0c:	6a 07       	cpc	r22, r26
     d0e:	7b 07       	cpc	r23, r27
     d10:	f8 f0       	brcs	.+62     	; 0xd50 <liga_amarelo+0xd4>
     d12:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d16:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d1a:	0c 97       	sbiw	r24, 0x0c	; 12
     d1c:	c9 f4       	brne	.+50     	; 0xd50 <liga_amarelo+0xd4>
		PORTD  &= ~(1<<7);  //Pinos PB7 em nivel baixo;
     d1e:	8b b1       	in	r24, 0x0b	; 11
     d20:	8f 77       	andi	r24, 0x7F	; 127
     d22:	8b b9       	out	0x0b, r24	; 11
		//USART_Transmit(6);
		tempo_ms_anterior = tempo_ms;
     d24:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tempo_ms>
     d28:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <tempo_ms+0x1>
     d2c:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <tempo_ms+0x2>
     d30:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <tempo_ms+0x3>
     d34:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <tempo_ms_anterior>
     d38:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <tempo_ms_anterior+0x1>
     d3c:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <tempo_ms_anterior+0x2>
     d40:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <tempo_ms_anterior+0x3>
		flag = 1;
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d4c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     d50:	08 95       	ret

00000d52 <liga_verde>:
	}
}

void liga_verde() // Função para habilitação da cor verde
{
	if(flag == 6){
     d52:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d56:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d5a:	06 97       	sbiw	r24, 0x06	; 6
     d5c:	f1 f4       	brne	.+60     	; 0xd9a <liga_verde+0x48>
		PORTB = 0b00001111; //Pinos PB0...3 em nivel alto
     d5e:	8f e0       	ldi	r24, 0x0F	; 15
     d60:	85 b9       	out	0x05, r24	; 5
		USART_Transmit(0);
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	0e 94 f7 04 	call	0x9ee	; 0x9ee <USART_Transmit>
		tempo_ms_anterior = tempo_ms;
     d68:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tempo_ms>
     d6c:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <tempo_ms+0x1>
     d70:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <tempo_ms+0x2>
     d74:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <tempo_ms+0x3>
     d78:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <tempo_ms_anterior>
     d7c:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <tempo_ms_anterior+0x1>
     d80:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <tempo_ms_anterior+0x2>
     d84:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <tempo_ms_anterior+0x3>
		flag ++;
     d88:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d8c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d90:	01 96       	adiw	r24, 0x01	; 1
     d92:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d96:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if((tempo_ms - tempo_ms_anterior) >= t_verde*250 && flag == 7){
     d9a:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <tempo_ms>
     d9e:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <tempo_ms+0x1>
     da2:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <tempo_ms+0x2>
     da6:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <tempo_ms+0x3>
     daa:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <tempo_ms_anterior>
     dae:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <tempo_ms_anterior+0x1>
     db2:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <tempo_ms_anterior+0x2>
     db6:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <tempo_ms_anterior+0x3>
     dba:	48 1b       	sub	r20, r24
     dbc:	59 0b       	sbc	r21, r25
     dbe:	6a 0b       	sbc	r22, r26
     dc0:	7b 0b       	sbc	r23, r27
     dc2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <t_verde>
     dc6:	2a ef       	ldi	r18, 0xFA	; 250
     dc8:	82 9f       	mul	r24, r18
     dca:	c0 01       	movw	r24, r0
     dcc:	11 24       	eor	r1, r1
     dce:	09 2e       	mov	r0, r25
     dd0:	00 0c       	add	r0, r0
     dd2:	aa 0b       	sbc	r26, r26
     dd4:	bb 0b       	sbc	r27, r27
     dd6:	48 17       	cp	r20, r24
     dd8:	59 07       	cpc	r21, r25
     dda:	6a 07       	cpc	r22, r26
     ddc:	7b 07       	cpc	r23, r27
     dde:	20 f1       	brcs	.+72     	; 0xe28 <liga_verde+0xd6>
     de0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     de4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     de8:	07 97       	sbiw	r24, 0x07	; 7
     dea:	f1 f4       	brne	.+60     	; 0xe28 <liga_verde+0xd6>
		PORTB = 0b00000111; //Pinos PB0...2 em nivel alto
     dec:	87 e0       	ldi	r24, 0x07	; 7
     dee:	85 b9       	out	0x05, r24	; 5
		USART_Transmit(1);
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	0e 94 f7 04 	call	0x9ee	; 0x9ee <USART_Transmit>
		tempo_ms_anterior = tempo_ms;
     df6:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tempo_ms>
     dfa:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <tempo_ms+0x1>
     dfe:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <tempo_ms+0x2>
     e02:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <tempo_ms+0x3>
     e06:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <tempo_ms_anterior>
     e0a:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <tempo_ms_anterior+0x1>
     e0e:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <tempo_ms_anterior+0x2>
     e12:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <tempo_ms_anterior+0x3>
		flag ++;
     e16:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e1a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     e1e:	01 96       	adiw	r24, 0x01	; 1
     e20:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     e24:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if((tempo_ms - tempo_ms_anterior) >= t_verde*250 && flag == 8){
     e28:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <tempo_ms>
     e2c:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <tempo_ms+0x1>
     e30:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <tempo_ms+0x2>
     e34:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <tempo_ms+0x3>
     e38:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <tempo_ms_anterior>
     e3c:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <tempo_ms_anterior+0x1>
     e40:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <tempo_ms_anterior+0x2>
     e44:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <tempo_ms_anterior+0x3>
     e48:	48 1b       	sub	r20, r24
     e4a:	59 0b       	sbc	r21, r25
     e4c:	6a 0b       	sbc	r22, r26
     e4e:	7b 0b       	sbc	r23, r27
     e50:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <t_verde>
     e54:	2a ef       	ldi	r18, 0xFA	; 250
     e56:	82 9f       	mul	r24, r18
     e58:	c0 01       	movw	r24, r0
     e5a:	11 24       	eor	r1, r1
     e5c:	09 2e       	mov	r0, r25
     e5e:	00 0c       	add	r0, r0
     e60:	aa 0b       	sbc	r26, r26
     e62:	bb 0b       	sbc	r27, r27
     e64:	48 17       	cp	r20, r24
     e66:	59 07       	cpc	r21, r25
     e68:	6a 07       	cpc	r22, r26
     e6a:	7b 07       	cpc	r23, r27
     e6c:	20 f1       	brcs	.+72     	; 0xeb6 <liga_verde+0x164>
     e6e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e72:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     e76:	08 97       	sbiw	r24, 0x08	; 8
     e78:	f1 f4       	brne	.+60     	; 0xeb6 <liga_verde+0x164>
		PORTB = 0b00000011; //Pinos PB0...1 em nivel alto
     e7a:	83 e0       	ldi	r24, 0x03	; 3
     e7c:	85 b9       	out	0x05, r24	; 5
		USART_Transmit(2);
     e7e:	82 e0       	ldi	r24, 0x02	; 2
     e80:	0e 94 f7 04 	call	0x9ee	; 0x9ee <USART_Transmit>
		tempo_ms_anterior = tempo_ms;
     e84:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tempo_ms>
     e88:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <tempo_ms+0x1>
     e8c:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <tempo_ms+0x2>
     e90:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <tempo_ms+0x3>
     e94:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <tempo_ms_anterior>
     e98:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <tempo_ms_anterior+0x1>
     e9c:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <tempo_ms_anterior+0x2>
     ea0:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <tempo_ms_anterior+0x3>
		flag ++;
     ea4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     ea8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     eac:	01 96       	adiw	r24, 0x01	; 1
     eae:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     eb2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if((tempo_ms - tempo_ms_anterior) >= t_verde*250 && flag == 9){
     eb6:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <tempo_ms>
     eba:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <tempo_ms+0x1>
     ebe:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <tempo_ms+0x2>
     ec2:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <tempo_ms+0x3>
     ec6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <tempo_ms_anterior>
     eca:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <tempo_ms_anterior+0x1>
     ece:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <tempo_ms_anterior+0x2>
     ed2:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <tempo_ms_anterior+0x3>
     ed6:	48 1b       	sub	r20, r24
     ed8:	59 0b       	sbc	r21, r25
     eda:	6a 0b       	sbc	r22, r26
     edc:	7b 0b       	sbc	r23, r27
     ede:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <t_verde>
     ee2:	2a ef       	ldi	r18, 0xFA	; 250
     ee4:	82 9f       	mul	r24, r18
     ee6:	c0 01       	movw	r24, r0
     ee8:	11 24       	eor	r1, r1
     eea:	09 2e       	mov	r0, r25
     eec:	00 0c       	add	r0, r0
     eee:	aa 0b       	sbc	r26, r26
     ef0:	bb 0b       	sbc	r27, r27
     ef2:	48 17       	cp	r20, r24
     ef4:	59 07       	cpc	r21, r25
     ef6:	6a 07       	cpc	r22, r26
     ef8:	7b 07       	cpc	r23, r27
     efa:	20 f1       	brcs	.+72     	; 0xf44 <liga_verde+0x1f2>
     efc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     f00:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     f04:	09 97       	sbiw	r24, 0x09	; 9
     f06:	f1 f4       	brne	.+60     	; 0xf44 <liga_verde+0x1f2>
		PORTB = 0b00000001; //Pinos PB0     em nivel alto
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	85 b9       	out	0x05, r24	; 5
		USART_Transmit(3);
     f0c:	83 e0       	ldi	r24, 0x03	; 3
     f0e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <USART_Transmit>
		tempo_ms_anterior = tempo_ms;
     f12:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tempo_ms>
     f16:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <tempo_ms+0x1>
     f1a:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <tempo_ms+0x2>
     f1e:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <tempo_ms+0x3>
     f22:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <tempo_ms_anterior>
     f26:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <tempo_ms_anterior+0x1>
     f2a:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <tempo_ms_anterior+0x2>
     f2e:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <tempo_ms_anterior+0x3>
		flag ++;
     f32:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     f36:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     f40:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if((tempo_ms - tempo_ms_anterior) >= t_verde*250 && flag == 10){
     f44:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <tempo_ms>
     f48:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <tempo_ms+0x1>
     f4c:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <tempo_ms+0x2>
     f50:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <tempo_ms+0x3>
     f54:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <tempo_ms_anterior>
     f58:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <tempo_ms_anterior+0x1>
     f5c:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <tempo_ms_anterior+0x2>
     f60:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <tempo_ms_anterior+0x3>
     f64:	48 1b       	sub	r20, r24
     f66:	59 0b       	sbc	r21, r25
     f68:	6a 0b       	sbc	r22, r26
     f6a:	7b 0b       	sbc	r23, r27
     f6c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <t_verde>
     f70:	2a ef       	ldi	r18, 0xFA	; 250
     f72:	82 9f       	mul	r24, r18
     f74:	c0 01       	movw	r24, r0
     f76:	11 24       	eor	r1, r1
     f78:	09 2e       	mov	r0, r25
     f7a:	00 0c       	add	r0, r0
     f7c:	aa 0b       	sbc	r26, r26
     f7e:	bb 0b       	sbc	r27, r27
     f80:	48 17       	cp	r20, r24
     f82:	59 07       	cpc	r21, r25
     f84:	6a 07       	cpc	r22, r26
     f86:	7b 07       	cpc	r23, r27
     f88:	18 f1       	brcs	.+70     	; 0xfd0 <liga_verde+0x27e>
     f8a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     f8e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     f92:	0a 97       	sbiw	r24, 0x0a	; 10
     f94:	e9 f4       	brne	.+58     	; 0xfd0 <liga_verde+0x27e>
		PORTB = 0b00000000; //Pinos PB0...3 em nivel baixo
     f96:	15 b8       	out	0x05, r1	; 5
		USART_Transmit(4);
     f98:	84 e0       	ldi	r24, 0x04	; 4
     f9a:	0e 94 f7 04 	call	0x9ee	; 0x9ee <USART_Transmit>
		tempo_ms_anterior = tempo_ms;
     f9e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tempo_ms>
     fa2:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <tempo_ms+0x1>
     fa6:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <tempo_ms+0x2>
     faa:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <tempo_ms+0x3>
     fae:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <tempo_ms_anterior>
     fb2:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <tempo_ms_anterior+0x1>
     fb6:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <tempo_ms_anterior+0x2>
     fba:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <tempo_ms_anterior+0x3>
		flag ++;
     fbe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     fc2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     fcc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     fd0:	08 95       	ret

00000fd2 <semaforo>:

// Implementação das funções

void semaforo() // Função geral do semaforo
{
	liga_amarelo();
     fd2:	0e 94 3e 06 	call	0xc7c	; 0xc7c <liga_amarelo>
	liga_vermelho();
     fd6:	0e 94 fe 04 	call	0x9fc	; 0x9fc <liga_vermelho>
	liga_verde();
     fda:	0e 94 a9 06 	call	0xd52	; 0xd52 <liga_verde>
     fde:	08 95       	ret

00000fe0 <main>:
// Função main

int main(void)
{
	// GPIO
	DDRB	= 0b11111111;							// Habilita os pinos PB0...7 como saida
     fe0:	2f ef       	ldi	r18, 0xFF	; 255
     fe2:	24 b9       	out	0x04, r18	; 4
	DDRD	= ~((1<<2)|(1<<4)|(1<<5)|(1<<6));		// Habilita os  pinos  PD2, PD4, PD5 e PD6 como entrada
     fe4:	8b e8       	ldi	r24, 0x8B	; 139
     fe6:	8a b9       	out	0x0a, r24	; 10
	PORTD  |= ((1<<2)|(1<<4)|(1<<5)|(1<<6));		// Habilita os pull-up de PD2, PD4, PD5 e PD6
     fe8:	8b b1       	in	r24, 0x0b	; 11
     fea:	84 67       	ori	r24, 0x74	; 116
     fec:	8b b9       	out	0x0b, r24	; 11
	DDRC	= ~((1<<6)|(1<<0));						// Habilita os pinos PC0 e PC6 como entrada
     fee:	8e eb       	ldi	r24, 0xBE	; 190
     ff0:	87 b9       	out	0x07, r24	; 7
	PORTC  |= (1<<6);								// Habilita o pull-up de PC6
     ff2:	88 b1       	in	r24, 0x08	; 8
     ff4:	80 64       	ori	r24, 0x40	; 64
     ff6:	88 b9       	out	0x08, r24	; 8

	// Configuração das interrupções
	EICRA  = 0b00000010;		// Interrrupçãp externa INT0 na borda de descida
     ff8:	82 e0       	ldi	r24, 0x02	; 2
     ffa:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK  = 0b00000001;		// Habilita a interrupção externa INT0
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	9d bb       	out	0x1d, r25	; 29
	PCICR  = 0b00000100;		// Habilita a interrupção externa PCINT2
    1002:	94 e0       	ldi	r25, 0x04	; 4
    1004:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK2 = 0b01110000;		// Habilita individualmente as portas PD4, PD5 e PD6
    1008:	30 e7       	ldi	r19, 0x70	; 112
    100a:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
	PCIFR  = 0b00000100;		// Indica se alguma interrupção ocorreu em PCINT2
    100e:	9b bb       	out	0x1b, r25	; 27
	
	// Configuração do ADC
	ADMUX  = 0b01000000;		// Vcc como referência, canal 0
    1010:	30 e4       	ldi	r19, 0x40	; 64
    1012:	30 93 7c 00 	sts	0x007C, r19	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = 0b11100111;		// Habilita o AD, modo de conversão continua, prescaler = 128
    1016:	37 ee       	ldi	r19, 0xE7	; 231
    1018:	30 93 7a 00 	sts	0x007A, r19	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = 0b00000000;		// Modo de conversão continua
    101c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	DIDR0  = 0b00111110;		// Habilita apenas o pino PC0 como entrada do ADC0
    1020:	3e e3       	ldi	r19, 0x3E	; 62
    1022:	30 93 7e 00 	sts	0x007E, r19	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	
	// Configuração do PWM
	//Fast PWM, OC2A e OC2B habilitados
	TCCR2A = 0b00100011;	// PWM não invertido no pino OC2B
    1026:	33 e2       	ldi	r19, 0x23	; 35
    1028:	30 93 b0 00 	sts	0x00B0, r19	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0b00000100;	// Liga TC2, prescaler = 64, fpwm =	f0sc/(256*prescaler) = 16MHz/(256*64) = 976Hz
    102c:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2B = 256;
    1030:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	
	// Configuração  da USART
	UBRR0H = (unsigned char)(MYUBRR>>8);				// Ajusta a taxa de transmissão
    1034:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)MYUBRR;
    1038:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);			// Habilita o transmissor e o receptor e a interrupção de recepção da USART
    103c:	98 e9       	ldi	r25, 0x98	; 152
    103e:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (3<<UCSZ00);								// Ajusta o formato do frame: 8 bits de dados e 1 de parada
    1042:	96 e0       	ldi	r25, 0x06	; 6
    1044:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// Interrupções do timer
	TCCR0A = 0b00000010;		// Habilita modo Ctc do TC0
    1048:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000011;		// Liga TC0 com prescaler = 64
    104a:	93 e0       	ldi	r25, 0x03	; 3
    104c:	95 bd       	out	0x25, r25	; 37
	OCR0A  = 249;				// Ajusta o comparador para o TC0 contar até 249
    104e:	99 ef       	ldi	r25, 0xF9	; 249
    1050:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b00000010;		// Habilita a interrupção na igualdade de comparação com OCR0A.
    1052:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	// A interrupção ocorre a cada 1 ms = (64 * (249 + 1)) / 16 MHz
	sei();						// Habilita interrupções globais, ativando o bit I do SREG
    1056:	78 94       	sei
	
	// Configuração do LCD
	nokia_lcd_init();
    1058:	0e 94 74 08 	call	0x10e8	; 0x10e8 <nokia_lcd_init>
	anima_LCD(t_vermelho, t_amarelo, t_verde);
    105c:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <t_verde>
    1060:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <t_amarelo>
    1064:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <t_vermelho>
    1068:	0e 94 68 01 	call	0x2d0	; 0x2d0 <anima_LCD>
	
	while (1)
	{
		semaforo();
    106c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <semaforo>
		IA_carros();
    1070:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <IA_carros>
		leitura_LDR();
    1074:	0e 94 6f 04 	call	0x8de	; 0x8de <leitura_LDR>
    1078:	f9 cf       	rjmp	.-14     	; 0x106c <main+0x8c>

0000107a <write>:
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
    107a:	98 b1       	in	r25, 0x08	; 8
    107c:	9d 7f       	andi	r25, 0xFD	; 253
    107e:	98 b9       	out	0x08, r25	; 8
    1080:	66 23       	and	r22, r22
    1082:	29 f0       	breq	.+10     	; 0x108e <write+0x14>
    1084:	98 b1       	in	r25, 0x08	; 8
    1086:	98 60       	ori	r25, 0x08	; 8
    1088:	98 b9       	out	0x08, r25	; 8
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	1f c0       	rjmp	.+62     	; 0x10cc <write+0x52>
    108e:	98 b1       	in	r25, 0x08	; 8
    1090:	97 7f       	andi	r25, 0xF7	; 247
    1092:	98 b9       	out	0x08, r25	; 8
    1094:	fa cf       	rjmp	.-12     	; 0x108a <write+0x10>
    1096:	47 e0       	ldi	r20, 0x07	; 7
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	49 1b       	sub	r20, r25
    109c:	51 09       	sbc	r21, r1
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <write+0x2e>
    10a4:	35 95       	asr	r19
    10a6:	27 95       	ror	r18
    10a8:	4a 95       	dec	r20
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <write+0x2a>
    10ac:	20 ff       	sbrs	r18, 0
    10ae:	04 c0       	rjmp	.+8      	; 0x10b8 <write+0x3e>
    10b0:	28 b1       	in	r18, 0x08	; 8
    10b2:	20 61       	ori	r18, 0x10	; 16
    10b4:	28 b9       	out	0x08, r18	; 8
    10b6:	03 c0       	rjmp	.+6      	; 0x10be <write+0x44>
    10b8:	28 b1       	in	r18, 0x08	; 8
    10ba:	2f 7e       	andi	r18, 0xEF	; 239
    10bc:	28 b9       	out	0x08, r18	; 8
    10be:	28 b1       	in	r18, 0x08	; 8
    10c0:	20 62       	ori	r18, 0x20	; 32
    10c2:	28 b9       	out	0x08, r18	; 8
    10c4:	28 b1       	in	r18, 0x08	; 8
    10c6:	2f 7d       	andi	r18, 0xDF	; 223
    10c8:	28 b9       	out	0x08, r18	; 8
    10ca:	9f 5f       	subi	r25, 0xFF	; 255
    10cc:	98 30       	cpi	r25, 0x08	; 8
    10ce:	18 f3       	brcs	.-58     	; 0x1096 <write+0x1c>
    10d0:	88 b1       	in	r24, 0x08	; 8
    10d2:	82 60       	ori	r24, 0x02	; 2
    10d4:	88 b9       	out	0x08, r24	; 8
    10d6:	08 95       	ret

000010d8 <write_cmd>:
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	0e 94 3d 08 	call	0x107a	; 0x107a <write>
    10de:	08 95       	ret

000010e0 <write_data>:
    10e0:	61 e0       	ldi	r22, 0x01	; 1
    10e2:	0e 94 3d 08 	call	0x107a	; 0x107a <write>
    10e6:	08 95       	ret

000010e8 <nokia_lcd_init>:
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	87 b1       	in	r24, 0x07	; 7
    10ee:	82 60       	ori	r24, 0x02	; 2
    10f0:	87 b9       	out	0x07, r24	; 7
    10f2:	87 b1       	in	r24, 0x07	; 7
    10f4:	84 60       	ori	r24, 0x04	; 4
    10f6:	87 b9       	out	0x07, r24	; 7
    10f8:	87 b1       	in	r24, 0x07	; 7
    10fa:	88 60       	ori	r24, 0x08	; 8
    10fc:	87 b9       	out	0x07, r24	; 7
    10fe:	87 b1       	in	r24, 0x07	; 7
    1100:	80 61       	ori	r24, 0x10	; 16
    1102:	87 b9       	out	0x07, r24	; 7
    1104:	87 b1       	in	r24, 0x07	; 7
    1106:	80 62       	ori	r24, 0x20	; 32
    1108:	87 b9       	out	0x07, r24	; 7
    110a:	88 b1       	in	r24, 0x08	; 8
    110c:	84 60       	ori	r24, 0x04	; 4
    110e:	88 b9       	out	0x08, r24	; 8
    1110:	88 b1       	in	r24, 0x08	; 8
    1112:	82 60       	ori	r24, 0x02	; 2
    1114:	88 b9       	out	0x08, r24	; 8
    1116:	83 ec       	ldi	r24, 0xC3	; 195
    1118:	99 e0       	ldi	r25, 0x09	; 9
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <nokia_lcd_init+0x32>
    111e:	00 c0       	rjmp	.+0      	; 0x1120 <nokia_lcd_init+0x38>
    1120:	00 00       	nop
    1122:	88 b1       	in	r24, 0x08	; 8
    1124:	8b 7f       	andi	r24, 0xFB	; 251
    1126:	88 b9       	out	0x08, r24	; 8
    1128:	8b e5       	ldi	r24, 0x5B	; 91
    112a:	94 e4       	ldi	r25, 0x44	; 68
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	f1 f7       	brne	.-4      	; 0x112c <nokia_lcd_init+0x44>
    1130:	00 c0       	rjmp	.+0      	; 0x1132 <nokia_lcd_init+0x4a>
    1132:	00 00       	nop
    1134:	88 b1       	in	r24, 0x08	; 8
    1136:	84 60       	ori	r24, 0x04	; 4
    1138:	88 b9       	out	0x08, r24	; 8
    113a:	88 b1       	in	r24, 0x08	; 8
    113c:	8d 7f       	andi	r24, 0xFD	; 253
    113e:	88 b9       	out	0x08, r24	; 8
    1140:	81 e2       	ldi	r24, 0x21	; 33
    1142:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <write_cmd>
    1146:	83 e1       	ldi	r24, 0x13	; 19
    1148:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <write_cmd>
    114c:	86 e0       	ldi	r24, 0x06	; 6
    114e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <write_cmd>
    1152:	82 ec       	ldi	r24, 0xC2	; 194
    1154:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <write_cmd>
    1158:	80 e2       	ldi	r24, 0x20	; 32
    115a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <write_cmd>
    115e:	89 e0       	ldi	r24, 0x09	; 9
    1160:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <write_cmd>
    1164:	80 e8       	ldi	r24, 0x80	; 128
    1166:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <write_cmd>
    116a:	80 e4       	ldi	r24, 0x40	; 64
    116c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <write_cmd>
    1170:	c0 e0       	ldi	r28, 0x00	; 0
    1172:	d0 e0       	ldi	r29, 0x00	; 0
    1174:	04 c0       	rjmp	.+8      	; 0x117e <nokia_lcd_init+0x96>
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	0e 94 70 08 	call	0x10e0	; 0x10e0 <write_data>
    117c:	21 96       	adiw	r28, 0x01	; 1
    117e:	c8 3f       	cpi	r28, 0xF8	; 248
    1180:	91 e0       	ldi	r25, 0x01	; 1
    1182:	d9 07       	cpc	r29, r25
    1184:	c0 f3       	brcs	.-16     	; 0x1176 <nokia_lcd_init+0x8e>
    1186:	88 e0       	ldi	r24, 0x08	; 8
    1188:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <write_cmd>
    118c:	8c e0       	ldi	r24, 0x0C	; 12
    118e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <write_cmd>
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	08 95       	ret

00001198 <nokia_lcd_clear>:
    1198:	80 e8       	ldi	r24, 0x80	; 128
    119a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <write_cmd>
    119e:	80 e4       	ldi	r24, 0x40	; 64
    11a0:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <write_cmd>
    11a4:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <nokia_lcd+0x1f8>
    11a8:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <nokia_lcd+0x1f9>
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	05 c0       	rjmp	.+10     	; 0x11bc <nokia_lcd_clear+0x24>
    11b2:	fc 01       	movw	r30, r24
    11b4:	e8 5a       	subi	r30, 0xA8	; 168
    11b6:	fe 4f       	sbci	r31, 0xFE	; 254
    11b8:	10 82       	st	Z, r1
    11ba:	01 96       	adiw	r24, 0x01	; 1
    11bc:	88 3f       	cpi	r24, 0xF8	; 248
    11be:	21 e0       	ldi	r18, 0x01	; 1
    11c0:	92 07       	cpc	r25, r18
    11c2:	b8 f3       	brcs	.-18     	; 0x11b2 <nokia_lcd_clear+0x1a>
    11c4:	08 95       	ret

000011c6 <nokia_lcd_set_pixel>:
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
    11c6:	26 2f       	mov	r18, r22
    11c8:	26 95       	lsr	r18
    11ca:	26 95       	lsr	r18
    11cc:	26 95       	lsr	r18
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	34 e5       	ldi	r19, 0x54	; 84
    11d2:	23 9f       	mul	r18, r19
    11d4:	80 0d       	add	r24, r0
    11d6:	91 1d       	adc	r25, r1
    11d8:	11 24       	eor	r1, r1
	if (value)
    11da:	44 23       	and	r20, r20
    11dc:	79 f0       	breq	.+30     	; 0x11fc <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
    11de:	67 70       	andi	r22, 0x07	; 7
    11e0:	21 e0       	ldi	r18, 0x01	; 1
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <nokia_lcd_set_pixel+0x24>
    11e6:	22 0f       	add	r18, r18
    11e8:	33 1f       	adc	r19, r19
    11ea:	6a 95       	dec	r22
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <nokia_lcd_set_pixel+0x20>
    11ee:	fc 01       	movw	r30, r24
    11f0:	e8 5a       	subi	r30, 0xA8	; 168
    11f2:	fe 4f       	sbci	r31, 0xFE	; 254
    11f4:	80 81       	ld	r24, Z
    11f6:	28 2b       	or	r18, r24
    11f8:	20 83       	st	Z, r18
    11fa:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
    11fc:	67 70       	andi	r22, 0x07	; 7
    11fe:	21 e0       	ldi	r18, 0x01	; 1
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <nokia_lcd_set_pixel+0x42>
    1204:	22 0f       	add	r18, r18
    1206:	33 1f       	adc	r19, r19
    1208:	6a 95       	dec	r22
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <nokia_lcd_set_pixel+0x3e>
    120c:	fc 01       	movw	r30, r24
    120e:	e8 5a       	subi	r30, 0xA8	; 168
    1210:	fe 4f       	sbci	r31, 0xFE	; 254
    1212:	20 95       	com	r18
    1214:	80 81       	ld	r24, Z
    1216:	28 23       	and	r18, r24
    1218:	20 83       	st	Z, r18
    121a:	08 95       	ret

0000121c <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
    121c:	ef 92       	push	r14
    121e:	ff 92       	push	r15
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	e8 2e       	mov	r14, r24
    122a:	f6 2e       	mov	r15, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    122c:	00 e0       	ldi	r16, 0x00	; 0
    122e:	45 c0       	rjmp	.+138    	; 0x12ba <nokia_lcd_write_char+0x9e>
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    1230:	2e 2d       	mov	r18, r14
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	20 52       	subi	r18, 0x20	; 32
    1236:	31 09       	sbc	r19, r1
    1238:	80 2f       	mov	r24, r16
    123a:	6f 2d       	mov	r22, r15
    123c:	0e 94 c3 09 	call	0x1386	; 0x1386 <__udivmodqi4>
    1240:	f9 01       	movw	r30, r18
    1242:	ee 0f       	add	r30, r30
    1244:	ff 1f       	adc	r31, r31
    1246:	ee 0f       	add	r30, r30
    1248:	ff 1f       	adc	r31, r31
    124a:	e2 0f       	add	r30, r18
    124c:	f3 1f       	adc	r31, r19
    124e:	e8 0f       	add	r30, r24
    1250:	f1 1d       	adc	r31, r1
    1252:	e8 59       	subi	r30, 0x98	; 152
    1254:	ff 4f       	sbci	r31, 0xFF	; 255
    1256:	e4 91       	lpm	r30, Z
    1258:	81 2f       	mov	r24, r17
    125a:	0e 94 c3 09 	call	0x1386	; 0x1386 <__udivmodqi4>
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <nokia_lcd_write_char+0x4a>
    1262:	f5 95       	asr	r31
    1264:	e7 95       	ror	r30
    1266:	8a 95       	dec	r24
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <nokia_lcd_write_char+0x46>
    126a:	e0 ff       	sbrs	r30, 0
    126c:	0a c0       	rjmp	.+20     	; 0x1282 <nokia_lcd_write_char+0x66>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
    126e:	60 91 51 03 	lds	r22, 0x0351	; 0x800351 <nokia_lcd+0x1f9>
    1272:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <nokia_lcd+0x1f8>
    1276:	61 0f       	add	r22, r17
    1278:	41 e0       	ldi	r20, 0x01	; 1
    127a:	80 0f       	add	r24, r16
    127c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <nokia_lcd_set_pixel>
    1280:	09 c0       	rjmp	.+18     	; 0x1294 <nokia_lcd_write_char+0x78>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    1282:	60 91 51 03 	lds	r22, 0x0351	; 0x800351 <nokia_lcd+0x1f9>
    1286:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <nokia_lcd+0x1f8>
    128a:	61 0f       	add	r22, r17
    128c:	40 e0       	ldi	r20, 0x00	; 0
    128e:	80 0f       	add	r24, r16
    1290:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
    1294:	1f 5f       	subi	r17, 0xFF	; 255
    1296:	01 c0       	rjmp	.+2      	; 0x129a <nokia_lcd_write_char+0x7e>
    1298:	10 e0       	ldi	r17, 0x00	; 0
    129a:	21 2f       	mov	r18, r17
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	ce 01       	movw	r24, r28
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	8c 1b       	sub	r24, r28
    12ae:	9d 0b       	sbc	r25, r29
    12b0:	28 17       	cp	r18, r24
    12b2:	39 07       	cpc	r19, r25
    12b4:	0c f4       	brge	.+2      	; 0x12b8 <nokia_lcd_write_char+0x9c>
    12b6:	bc cf       	rjmp	.-136    	; 0x1230 <nokia_lcd_write_char+0x14>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    12b8:	0f 5f       	subi	r16, 0xFF	; 255
    12ba:	20 2f       	mov	r18, r16
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	cf 2d       	mov	r28, r15
    12c0:	d0 e0       	ldi	r29, 0x00	; 0
    12c2:	ce 01       	movw	r24, r28
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	8c 0f       	add	r24, r28
    12ce:	9d 1f       	adc	r25, r29
    12d0:	28 17       	cp	r18, r24
    12d2:	39 07       	cpc	r19, r25
    12d4:	0c f3       	brlt	.-62     	; 0x1298 <nokia_lcd_write_char+0x7c>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    12d6:	e0 e5       	ldi	r30, 0x50	; 80
    12d8:	f3 e0       	ldi	r31, 0x03	; 3
    12da:	8f 2d       	mov	r24, r15
    12dc:	88 0f       	add	r24, r24
    12de:	88 0f       	add	r24, r24
    12e0:	8f 0d       	add	r24, r15
    12e2:	90 81       	ld	r25, Z
    12e4:	89 0f       	add	r24, r25
    12e6:	8f 5f       	subi	r24, 0xFF	; 255
    12e8:	80 83       	st	Z, r24
	if (nokia_lcd.cursor_x >= 84) {
    12ea:	84 35       	cpi	r24, 0x54	; 84
    12ec:	70 f0       	brcs	.+28     	; 0x130a <nokia_lcd_write_char+0xee>
		nokia_lcd.cursor_x = 0;
    12ee:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
    12f2:	e1 e5       	ldi	r30, 0x51	; 81
    12f4:	f3 e0       	ldi	r31, 0x03	; 3
    12f6:	8f 2d       	mov	r24, r15
    12f8:	88 0f       	add	r24, r24
    12fa:	88 0f       	add	r24, r24
    12fc:	88 0f       	add	r24, r24
    12fe:	98 2f       	mov	r25, r24
    1300:	9f 19       	sub	r25, r15
    1302:	80 81       	ld	r24, Z
    1304:	89 0f       	add	r24, r25
    1306:	8f 5f       	subi	r24, 0xFF	; 255
    1308:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
    130a:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <nokia_lcd+0x1f9>
    130e:	80 33       	cpi	r24, 0x30	; 48
    1310:	20 f0       	brcs	.+8      	; 0x131a <nokia_lcd_write_char+0xfe>
		nokia_lcd.cursor_x = 0;
    1312:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
    1316:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <nokia_lcd+0x1f9>
	}
}
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	1f 91       	pop	r17
    1320:	0f 91       	pop	r16
    1322:	ff 90       	pop	r15
    1324:	ef 90       	pop	r14
    1326:	08 95       	ret

00001328 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
    1328:	1f 93       	push	r17
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	ec 01       	movw	r28, r24
    1330:	16 2f       	mov	r17, r22
	while(*str)
    1332:	04 c0       	rjmp	.+8      	; 0x133c <nokia_lcd_write_string+0x14>
		nokia_lcd_write_char(*str++, scale);
    1334:	21 96       	adiw	r28, 0x01	; 1
    1336:	61 2f       	mov	r22, r17
    1338:	0e 94 0e 09 	call	0x121c	; 0x121c <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
    133c:	88 81       	ld	r24, Y
    133e:	81 11       	cpse	r24, r1
    1340:	f9 cf       	rjmp	.-14     	; 0x1334 <nokia_lcd_write_string+0xc>
		nokia_lcd_write_char(*str++, scale);
}
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	08 95       	ret

0000134a <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    134a:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
    134e:	60 93 51 03 	sts	0x0351, r22	; 0x800351 <nokia_lcd+0x1f9>
    1352:	08 95       	ret

00001354 <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
    1358:	80 e8       	ldi	r24, 0x80	; 128
    135a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <write_cmd>
	write_cmd(0x40);
    135e:	80 e4       	ldi	r24, 0x40	; 64
    1360:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <write_cmd>

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    1364:	c0 e0       	ldi	r28, 0x00	; 0
    1366:	d0 e0       	ldi	r29, 0x00	; 0
    1368:	07 c0       	rjmp	.+14     	; 0x1378 <nokia_lcd_render+0x24>
		write_data(nokia_lcd.screen[i]);
    136a:	fe 01       	movw	r30, r28
    136c:	e8 5a       	subi	r30, 0xA8	; 168
    136e:	fe 4f       	sbci	r31, 0xFE	; 254
    1370:	80 81       	ld	r24, Z
    1372:	0e 94 70 08 	call	0x10e0	; 0x10e0 <write_data>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    1376:	21 96       	adiw	r28, 0x01	; 1
    1378:	c8 3f       	cpi	r28, 0xF8	; 248
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	d8 07       	cpc	r29, r24
    137e:	a8 f3       	brcs	.-22     	; 0x136a <nokia_lcd_render+0x16>
		write_data(nokia_lcd.screen[i]);
}
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	08 95       	ret

00001386 <__udivmodqi4>:
    1386:	99 1b       	sub	r25, r25
    1388:	79 e0       	ldi	r23, 0x09	; 9
    138a:	04 c0       	rjmp	.+8      	; 0x1394 <__udivmodqi4_ep>

0000138c <__udivmodqi4_loop>:
    138c:	99 1f       	adc	r25, r25
    138e:	96 17       	cp	r25, r22
    1390:	08 f0       	brcs	.+2      	; 0x1394 <__udivmodqi4_ep>
    1392:	96 1b       	sub	r25, r22

00001394 <__udivmodqi4_ep>:
    1394:	88 1f       	adc	r24, r24
    1396:	7a 95       	dec	r23
    1398:	c9 f7       	brne	.-14     	; 0x138c <__udivmodqi4_loop>
    139a:	80 95       	com	r24
    139c:	08 95       	ret

0000139e <__udivmodsi4>:
    139e:	a1 e2       	ldi	r26, 0x21	; 33
    13a0:	1a 2e       	mov	r1, r26
    13a2:	aa 1b       	sub	r26, r26
    13a4:	bb 1b       	sub	r27, r27
    13a6:	fd 01       	movw	r30, r26
    13a8:	0d c0       	rjmp	.+26     	; 0x13c4 <__udivmodsi4_ep>

000013aa <__udivmodsi4_loop>:
    13aa:	aa 1f       	adc	r26, r26
    13ac:	bb 1f       	adc	r27, r27
    13ae:	ee 1f       	adc	r30, r30
    13b0:	ff 1f       	adc	r31, r31
    13b2:	a2 17       	cp	r26, r18
    13b4:	b3 07       	cpc	r27, r19
    13b6:	e4 07       	cpc	r30, r20
    13b8:	f5 07       	cpc	r31, r21
    13ba:	20 f0       	brcs	.+8      	; 0x13c4 <__udivmodsi4_ep>
    13bc:	a2 1b       	sub	r26, r18
    13be:	b3 0b       	sbc	r27, r19
    13c0:	e4 0b       	sbc	r30, r20
    13c2:	f5 0b       	sbc	r31, r21

000013c4 <__udivmodsi4_ep>:
    13c4:	66 1f       	adc	r22, r22
    13c6:	77 1f       	adc	r23, r23
    13c8:	88 1f       	adc	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	1a 94       	dec	r1
    13ce:	69 f7       	brne	.-38     	; 0x13aa <__udivmodsi4_loop>
    13d0:	60 95       	com	r22
    13d2:	70 95       	com	r23
    13d4:	80 95       	com	r24
    13d6:	90 95       	com	r25
    13d8:	9b 01       	movw	r18, r22
    13da:	ac 01       	movw	r20, r24
    13dc:	bd 01       	movw	r22, r26
    13de:	cf 01       	movw	r24, r30
    13e0:	08 95       	ret

000013e2 <__divmodsi4>:
    13e2:	05 2e       	mov	r0, r21
    13e4:	97 fb       	bst	r25, 7
    13e6:	1e f4       	brtc	.+6      	; 0x13ee <__divmodsi4+0xc>
    13e8:	00 94       	com	r0
    13ea:	0e 94 08 0a 	call	0x1410	; 0x1410 <__negsi2>
    13ee:	57 fd       	sbrc	r21, 7
    13f0:	07 d0       	rcall	.+14     	; 0x1400 <__divmodsi4_neg2>
    13f2:	0e 94 cf 09 	call	0x139e	; 0x139e <__udivmodsi4>
    13f6:	07 fc       	sbrc	r0, 7
    13f8:	03 d0       	rcall	.+6      	; 0x1400 <__divmodsi4_neg2>
    13fa:	4e f4       	brtc	.+18     	; 0x140e <__divmodsi4_exit>
    13fc:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__negsi2>

00001400 <__divmodsi4_neg2>:
    1400:	50 95       	com	r21
    1402:	40 95       	com	r20
    1404:	30 95       	com	r19
    1406:	21 95       	neg	r18
    1408:	3f 4f       	sbci	r19, 0xFF	; 255
    140a:	4f 4f       	sbci	r20, 0xFF	; 255
    140c:	5f 4f       	sbci	r21, 0xFF	; 255

0000140e <__divmodsi4_exit>:
    140e:	08 95       	ret

00001410 <__negsi2>:
    1410:	90 95       	com	r25
    1412:	80 95       	com	r24
    1414:	70 95       	com	r23
    1416:	61 95       	neg	r22
    1418:	7f 4f       	sbci	r23, 0xFF	; 255
    141a:	8f 4f       	sbci	r24, 0xFF	; 255
    141c:	9f 4f       	sbci	r25, 0xFF	; 255
    141e:	08 95       	ret

00001420 <sprintf>:
    1420:	ae e0       	ldi	r26, 0x0E	; 14
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e6 e1       	ldi	r30, 0x16	; 22
    1426:	fa e0       	ldi	r31, 0x0A	; 10
    1428:	0c 94 d1 0c 	jmp	0x19a2	; 0x19a2 <__prologue_saves__+0x1c>
    142c:	0d 89       	ldd	r16, Y+21	; 0x15
    142e:	1e 89       	ldd	r17, Y+22	; 0x16
    1430:	86 e0       	ldi	r24, 0x06	; 6
    1432:	8c 83       	std	Y+4, r24	; 0x04
    1434:	1a 83       	std	Y+2, r17	; 0x02
    1436:	09 83       	std	Y+1, r16	; 0x01
    1438:	8f ef       	ldi	r24, 0xFF	; 255
    143a:	9f e7       	ldi	r25, 0x7F	; 127
    143c:	9e 83       	std	Y+6, r25	; 0x06
    143e:	8d 83       	std	Y+5, r24	; 0x05
    1440:	ae 01       	movw	r20, r28
    1442:	47 5e       	subi	r20, 0xE7	; 231
    1444:	5f 4f       	sbci	r21, 0xFF	; 255
    1446:	6f 89       	ldd	r22, Y+23	; 0x17
    1448:	78 8d       	ldd	r23, Y+24	; 0x18
    144a:	ce 01       	movw	r24, r28
    144c:	01 96       	adiw	r24, 0x01	; 1
    144e:	0e 94 32 0a 	call	0x1464	; 0x1464 <vfprintf>
    1452:	ef 81       	ldd	r30, Y+7	; 0x07
    1454:	f8 85       	ldd	r31, Y+8	; 0x08
    1456:	e0 0f       	add	r30, r16
    1458:	f1 1f       	adc	r31, r17
    145a:	10 82       	st	Z, r1
    145c:	2e 96       	adiw	r28, 0x0e	; 14
    145e:	e4 e0       	ldi	r30, 0x04	; 4
    1460:	0c 94 ed 0c 	jmp	0x19da	; 0x19da <__epilogue_restores__+0x1c>

00001464 <vfprintf>:
    1464:	ab e0       	ldi	r26, 0x0B	; 11
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e8 e3       	ldi	r30, 0x38	; 56
    146a:	fa e0       	ldi	r31, 0x0A	; 10
    146c:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <__prologue_saves__>
    1470:	6c 01       	movw	r12, r24
    1472:	7b 01       	movw	r14, r22
    1474:	8a 01       	movw	r16, r20
    1476:	fc 01       	movw	r30, r24
    1478:	17 82       	std	Z+7, r1	; 0x07
    147a:	16 82       	std	Z+6, r1	; 0x06
    147c:	83 81       	ldd	r24, Z+3	; 0x03
    147e:	81 ff       	sbrs	r24, 1
    1480:	cc c1       	rjmp	.+920    	; 0x181a <vfprintf+0x3b6>
    1482:	ce 01       	movw	r24, r28
    1484:	01 96       	adiw	r24, 0x01	; 1
    1486:	3c 01       	movw	r6, r24
    1488:	f6 01       	movw	r30, r12
    148a:	93 81       	ldd	r25, Z+3	; 0x03
    148c:	f7 01       	movw	r30, r14
    148e:	93 fd       	sbrc	r25, 3
    1490:	85 91       	lpm	r24, Z+
    1492:	93 ff       	sbrs	r25, 3
    1494:	81 91       	ld	r24, Z+
    1496:	7f 01       	movw	r14, r30
    1498:	88 23       	and	r24, r24
    149a:	09 f4       	brne	.+2      	; 0x149e <vfprintf+0x3a>
    149c:	ba c1       	rjmp	.+884    	; 0x1812 <vfprintf+0x3ae>
    149e:	85 32       	cpi	r24, 0x25	; 37
    14a0:	39 f4       	brne	.+14     	; 0x14b0 <vfprintf+0x4c>
    14a2:	93 fd       	sbrc	r25, 3
    14a4:	85 91       	lpm	r24, Z+
    14a6:	93 ff       	sbrs	r25, 3
    14a8:	81 91       	ld	r24, Z+
    14aa:	7f 01       	movw	r14, r30
    14ac:	85 32       	cpi	r24, 0x25	; 37
    14ae:	29 f4       	brne	.+10     	; 0x14ba <vfprintf+0x56>
    14b0:	b6 01       	movw	r22, r12
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 29 0c 	call	0x1852	; 0x1852 <fputc>
    14b8:	e7 cf       	rjmp	.-50     	; 0x1488 <vfprintf+0x24>
    14ba:	91 2c       	mov	r9, r1
    14bc:	21 2c       	mov	r2, r1
    14be:	31 2c       	mov	r3, r1
    14c0:	ff e1       	ldi	r31, 0x1F	; 31
    14c2:	f3 15       	cp	r31, r3
    14c4:	d8 f0       	brcs	.+54     	; 0x14fc <vfprintf+0x98>
    14c6:	8b 32       	cpi	r24, 0x2B	; 43
    14c8:	79 f0       	breq	.+30     	; 0x14e8 <vfprintf+0x84>
    14ca:	38 f4       	brcc	.+14     	; 0x14da <vfprintf+0x76>
    14cc:	80 32       	cpi	r24, 0x20	; 32
    14ce:	79 f0       	breq	.+30     	; 0x14ee <vfprintf+0x8a>
    14d0:	83 32       	cpi	r24, 0x23	; 35
    14d2:	a1 f4       	brne	.+40     	; 0x14fc <vfprintf+0x98>
    14d4:	23 2d       	mov	r18, r3
    14d6:	20 61       	ori	r18, 0x10	; 16
    14d8:	1d c0       	rjmp	.+58     	; 0x1514 <vfprintf+0xb0>
    14da:	8d 32       	cpi	r24, 0x2D	; 45
    14dc:	61 f0       	breq	.+24     	; 0x14f6 <vfprintf+0x92>
    14de:	80 33       	cpi	r24, 0x30	; 48
    14e0:	69 f4       	brne	.+26     	; 0x14fc <vfprintf+0x98>
    14e2:	23 2d       	mov	r18, r3
    14e4:	21 60       	ori	r18, 0x01	; 1
    14e6:	16 c0       	rjmp	.+44     	; 0x1514 <vfprintf+0xb0>
    14e8:	83 2d       	mov	r24, r3
    14ea:	82 60       	ori	r24, 0x02	; 2
    14ec:	38 2e       	mov	r3, r24
    14ee:	e3 2d       	mov	r30, r3
    14f0:	e4 60       	ori	r30, 0x04	; 4
    14f2:	3e 2e       	mov	r3, r30
    14f4:	2a c0       	rjmp	.+84     	; 0x154a <vfprintf+0xe6>
    14f6:	f3 2d       	mov	r31, r3
    14f8:	f8 60       	ori	r31, 0x08	; 8
    14fa:	1d c0       	rjmp	.+58     	; 0x1536 <vfprintf+0xd2>
    14fc:	37 fc       	sbrc	r3, 7
    14fe:	2d c0       	rjmp	.+90     	; 0x155a <vfprintf+0xf6>
    1500:	20 ed       	ldi	r18, 0xD0	; 208
    1502:	28 0f       	add	r18, r24
    1504:	2a 30       	cpi	r18, 0x0A	; 10
    1506:	40 f0       	brcs	.+16     	; 0x1518 <vfprintf+0xb4>
    1508:	8e 32       	cpi	r24, 0x2E	; 46
    150a:	b9 f4       	brne	.+46     	; 0x153a <vfprintf+0xd6>
    150c:	36 fc       	sbrc	r3, 6
    150e:	81 c1       	rjmp	.+770    	; 0x1812 <vfprintf+0x3ae>
    1510:	23 2d       	mov	r18, r3
    1512:	20 64       	ori	r18, 0x40	; 64
    1514:	32 2e       	mov	r3, r18
    1516:	19 c0       	rjmp	.+50     	; 0x154a <vfprintf+0xe6>
    1518:	36 fe       	sbrs	r3, 6
    151a:	06 c0       	rjmp	.+12     	; 0x1528 <vfprintf+0xc4>
    151c:	8a e0       	ldi	r24, 0x0A	; 10
    151e:	98 9e       	mul	r9, r24
    1520:	20 0d       	add	r18, r0
    1522:	11 24       	eor	r1, r1
    1524:	92 2e       	mov	r9, r18
    1526:	11 c0       	rjmp	.+34     	; 0x154a <vfprintf+0xe6>
    1528:	ea e0       	ldi	r30, 0x0A	; 10
    152a:	2e 9e       	mul	r2, r30
    152c:	20 0d       	add	r18, r0
    152e:	11 24       	eor	r1, r1
    1530:	22 2e       	mov	r2, r18
    1532:	f3 2d       	mov	r31, r3
    1534:	f0 62       	ori	r31, 0x20	; 32
    1536:	3f 2e       	mov	r3, r31
    1538:	08 c0       	rjmp	.+16     	; 0x154a <vfprintf+0xe6>
    153a:	8c 36       	cpi	r24, 0x6C	; 108
    153c:	21 f4       	brne	.+8      	; 0x1546 <vfprintf+0xe2>
    153e:	83 2d       	mov	r24, r3
    1540:	80 68       	ori	r24, 0x80	; 128
    1542:	38 2e       	mov	r3, r24
    1544:	02 c0       	rjmp	.+4      	; 0x154a <vfprintf+0xe6>
    1546:	88 36       	cpi	r24, 0x68	; 104
    1548:	41 f4       	brne	.+16     	; 0x155a <vfprintf+0xf6>
    154a:	f7 01       	movw	r30, r14
    154c:	93 fd       	sbrc	r25, 3
    154e:	85 91       	lpm	r24, Z+
    1550:	93 ff       	sbrs	r25, 3
    1552:	81 91       	ld	r24, Z+
    1554:	7f 01       	movw	r14, r30
    1556:	81 11       	cpse	r24, r1
    1558:	b3 cf       	rjmp	.-154    	; 0x14c0 <vfprintf+0x5c>
    155a:	98 2f       	mov	r25, r24
    155c:	9f 7d       	andi	r25, 0xDF	; 223
    155e:	95 54       	subi	r25, 0x45	; 69
    1560:	93 30       	cpi	r25, 0x03	; 3
    1562:	28 f4       	brcc	.+10     	; 0x156e <vfprintf+0x10a>
    1564:	0c 5f       	subi	r16, 0xFC	; 252
    1566:	1f 4f       	sbci	r17, 0xFF	; 255
    1568:	9f e3       	ldi	r25, 0x3F	; 63
    156a:	99 83       	std	Y+1, r25	; 0x01
    156c:	0d c0       	rjmp	.+26     	; 0x1588 <vfprintf+0x124>
    156e:	83 36       	cpi	r24, 0x63	; 99
    1570:	31 f0       	breq	.+12     	; 0x157e <vfprintf+0x11a>
    1572:	83 37       	cpi	r24, 0x73	; 115
    1574:	71 f0       	breq	.+28     	; 0x1592 <vfprintf+0x12e>
    1576:	83 35       	cpi	r24, 0x53	; 83
    1578:	09 f0       	breq	.+2      	; 0x157c <vfprintf+0x118>
    157a:	59 c0       	rjmp	.+178    	; 0x162e <vfprintf+0x1ca>
    157c:	21 c0       	rjmp	.+66     	; 0x15c0 <vfprintf+0x15c>
    157e:	f8 01       	movw	r30, r16
    1580:	80 81       	ld	r24, Z
    1582:	89 83       	std	Y+1, r24	; 0x01
    1584:	0e 5f       	subi	r16, 0xFE	; 254
    1586:	1f 4f       	sbci	r17, 0xFF	; 255
    1588:	88 24       	eor	r8, r8
    158a:	83 94       	inc	r8
    158c:	91 2c       	mov	r9, r1
    158e:	53 01       	movw	r10, r6
    1590:	13 c0       	rjmp	.+38     	; 0x15b8 <vfprintf+0x154>
    1592:	28 01       	movw	r4, r16
    1594:	f2 e0       	ldi	r31, 0x02	; 2
    1596:	4f 0e       	add	r4, r31
    1598:	51 1c       	adc	r5, r1
    159a:	f8 01       	movw	r30, r16
    159c:	a0 80       	ld	r10, Z
    159e:	b1 80       	ldd	r11, Z+1	; 0x01
    15a0:	36 fe       	sbrs	r3, 6
    15a2:	03 c0       	rjmp	.+6      	; 0x15aa <vfprintf+0x146>
    15a4:	69 2d       	mov	r22, r9
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <vfprintf+0x14a>
    15aa:	6f ef       	ldi	r22, 0xFF	; 255
    15ac:	7f ef       	ldi	r23, 0xFF	; 255
    15ae:	c5 01       	movw	r24, r10
    15b0:	0e 94 1e 0c 	call	0x183c	; 0x183c <strnlen>
    15b4:	4c 01       	movw	r8, r24
    15b6:	82 01       	movw	r16, r4
    15b8:	f3 2d       	mov	r31, r3
    15ba:	ff 77       	andi	r31, 0x7F	; 127
    15bc:	3f 2e       	mov	r3, r31
    15be:	16 c0       	rjmp	.+44     	; 0x15ec <vfprintf+0x188>
    15c0:	28 01       	movw	r4, r16
    15c2:	22 e0       	ldi	r18, 0x02	; 2
    15c4:	42 0e       	add	r4, r18
    15c6:	51 1c       	adc	r5, r1
    15c8:	f8 01       	movw	r30, r16
    15ca:	a0 80       	ld	r10, Z
    15cc:	b1 80       	ldd	r11, Z+1	; 0x01
    15ce:	36 fe       	sbrs	r3, 6
    15d0:	03 c0       	rjmp	.+6      	; 0x15d8 <vfprintf+0x174>
    15d2:	69 2d       	mov	r22, r9
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <vfprintf+0x178>
    15d8:	6f ef       	ldi	r22, 0xFF	; 255
    15da:	7f ef       	ldi	r23, 0xFF	; 255
    15dc:	c5 01       	movw	r24, r10
    15de:	0e 94 13 0c 	call	0x1826	; 0x1826 <strnlen_P>
    15e2:	4c 01       	movw	r8, r24
    15e4:	f3 2d       	mov	r31, r3
    15e6:	f0 68       	ori	r31, 0x80	; 128
    15e8:	3f 2e       	mov	r3, r31
    15ea:	82 01       	movw	r16, r4
    15ec:	33 fc       	sbrc	r3, 3
    15ee:	1b c0       	rjmp	.+54     	; 0x1626 <vfprintf+0x1c2>
    15f0:	82 2d       	mov	r24, r2
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	88 16       	cp	r8, r24
    15f6:	99 06       	cpc	r9, r25
    15f8:	b0 f4       	brcc	.+44     	; 0x1626 <vfprintf+0x1c2>
    15fa:	b6 01       	movw	r22, r12
    15fc:	80 e2       	ldi	r24, 0x20	; 32
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	0e 94 29 0c 	call	0x1852	; 0x1852 <fputc>
    1604:	2a 94       	dec	r2
    1606:	f4 cf       	rjmp	.-24     	; 0x15f0 <vfprintf+0x18c>
    1608:	f5 01       	movw	r30, r10
    160a:	37 fc       	sbrc	r3, 7
    160c:	85 91       	lpm	r24, Z+
    160e:	37 fe       	sbrs	r3, 7
    1610:	81 91       	ld	r24, Z+
    1612:	5f 01       	movw	r10, r30
    1614:	b6 01       	movw	r22, r12
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	0e 94 29 0c 	call	0x1852	; 0x1852 <fputc>
    161c:	21 10       	cpse	r2, r1
    161e:	2a 94       	dec	r2
    1620:	21 e0       	ldi	r18, 0x01	; 1
    1622:	82 1a       	sub	r8, r18
    1624:	91 08       	sbc	r9, r1
    1626:	81 14       	cp	r8, r1
    1628:	91 04       	cpc	r9, r1
    162a:	71 f7       	brne	.-36     	; 0x1608 <vfprintf+0x1a4>
    162c:	e8 c0       	rjmp	.+464    	; 0x17fe <vfprintf+0x39a>
    162e:	84 36       	cpi	r24, 0x64	; 100
    1630:	11 f0       	breq	.+4      	; 0x1636 <vfprintf+0x1d2>
    1632:	89 36       	cpi	r24, 0x69	; 105
    1634:	41 f5       	brne	.+80     	; 0x1686 <vfprintf+0x222>
    1636:	f8 01       	movw	r30, r16
    1638:	37 fe       	sbrs	r3, 7
    163a:	07 c0       	rjmp	.+14     	; 0x164a <vfprintf+0x1e6>
    163c:	60 81       	ld	r22, Z
    163e:	71 81       	ldd	r23, Z+1	; 0x01
    1640:	82 81       	ldd	r24, Z+2	; 0x02
    1642:	93 81       	ldd	r25, Z+3	; 0x03
    1644:	0c 5f       	subi	r16, 0xFC	; 252
    1646:	1f 4f       	sbci	r17, 0xFF	; 255
    1648:	08 c0       	rjmp	.+16     	; 0x165a <vfprintf+0x1f6>
    164a:	60 81       	ld	r22, Z
    164c:	71 81       	ldd	r23, Z+1	; 0x01
    164e:	07 2e       	mov	r0, r23
    1650:	00 0c       	add	r0, r0
    1652:	88 0b       	sbc	r24, r24
    1654:	99 0b       	sbc	r25, r25
    1656:	0e 5f       	subi	r16, 0xFE	; 254
    1658:	1f 4f       	sbci	r17, 0xFF	; 255
    165a:	f3 2d       	mov	r31, r3
    165c:	ff 76       	andi	r31, 0x6F	; 111
    165e:	3f 2e       	mov	r3, r31
    1660:	97 ff       	sbrs	r25, 7
    1662:	09 c0       	rjmp	.+18     	; 0x1676 <vfprintf+0x212>
    1664:	90 95       	com	r25
    1666:	80 95       	com	r24
    1668:	70 95       	com	r23
    166a:	61 95       	neg	r22
    166c:	7f 4f       	sbci	r23, 0xFF	; 255
    166e:	8f 4f       	sbci	r24, 0xFF	; 255
    1670:	9f 4f       	sbci	r25, 0xFF	; 255
    1672:	f0 68       	ori	r31, 0x80	; 128
    1674:	3f 2e       	mov	r3, r31
    1676:	2a e0       	ldi	r18, 0x0A	; 10
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	a3 01       	movw	r20, r6
    167c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__ultoa_invert>
    1680:	88 2e       	mov	r8, r24
    1682:	86 18       	sub	r8, r6
    1684:	45 c0       	rjmp	.+138    	; 0x1710 <vfprintf+0x2ac>
    1686:	85 37       	cpi	r24, 0x75	; 117
    1688:	31 f4       	brne	.+12     	; 0x1696 <vfprintf+0x232>
    168a:	23 2d       	mov	r18, r3
    168c:	2f 7e       	andi	r18, 0xEF	; 239
    168e:	b2 2e       	mov	r11, r18
    1690:	2a e0       	ldi	r18, 0x0A	; 10
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	25 c0       	rjmp	.+74     	; 0x16e0 <vfprintf+0x27c>
    1696:	93 2d       	mov	r25, r3
    1698:	99 7f       	andi	r25, 0xF9	; 249
    169a:	b9 2e       	mov	r11, r25
    169c:	8f 36       	cpi	r24, 0x6F	; 111
    169e:	c1 f0       	breq	.+48     	; 0x16d0 <vfprintf+0x26c>
    16a0:	18 f4       	brcc	.+6      	; 0x16a8 <vfprintf+0x244>
    16a2:	88 35       	cpi	r24, 0x58	; 88
    16a4:	79 f0       	breq	.+30     	; 0x16c4 <vfprintf+0x260>
    16a6:	b5 c0       	rjmp	.+362    	; 0x1812 <vfprintf+0x3ae>
    16a8:	80 37       	cpi	r24, 0x70	; 112
    16aa:	19 f0       	breq	.+6      	; 0x16b2 <vfprintf+0x24e>
    16ac:	88 37       	cpi	r24, 0x78	; 120
    16ae:	21 f0       	breq	.+8      	; 0x16b8 <vfprintf+0x254>
    16b0:	b0 c0       	rjmp	.+352    	; 0x1812 <vfprintf+0x3ae>
    16b2:	e9 2f       	mov	r30, r25
    16b4:	e0 61       	ori	r30, 0x10	; 16
    16b6:	be 2e       	mov	r11, r30
    16b8:	b4 fe       	sbrs	r11, 4
    16ba:	0d c0       	rjmp	.+26     	; 0x16d6 <vfprintf+0x272>
    16bc:	fb 2d       	mov	r31, r11
    16be:	f4 60       	ori	r31, 0x04	; 4
    16c0:	bf 2e       	mov	r11, r31
    16c2:	09 c0       	rjmp	.+18     	; 0x16d6 <vfprintf+0x272>
    16c4:	34 fe       	sbrs	r3, 4
    16c6:	0a c0       	rjmp	.+20     	; 0x16dc <vfprintf+0x278>
    16c8:	29 2f       	mov	r18, r25
    16ca:	26 60       	ori	r18, 0x06	; 6
    16cc:	b2 2e       	mov	r11, r18
    16ce:	06 c0       	rjmp	.+12     	; 0x16dc <vfprintf+0x278>
    16d0:	28 e0       	ldi	r18, 0x08	; 8
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	05 c0       	rjmp	.+10     	; 0x16e0 <vfprintf+0x27c>
    16d6:	20 e1       	ldi	r18, 0x10	; 16
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <vfprintf+0x27c>
    16dc:	20 e1       	ldi	r18, 0x10	; 16
    16de:	32 e0       	ldi	r19, 0x02	; 2
    16e0:	f8 01       	movw	r30, r16
    16e2:	b7 fe       	sbrs	r11, 7
    16e4:	07 c0       	rjmp	.+14     	; 0x16f4 <vfprintf+0x290>
    16e6:	60 81       	ld	r22, Z
    16e8:	71 81       	ldd	r23, Z+1	; 0x01
    16ea:	82 81       	ldd	r24, Z+2	; 0x02
    16ec:	93 81       	ldd	r25, Z+3	; 0x03
    16ee:	0c 5f       	subi	r16, 0xFC	; 252
    16f0:	1f 4f       	sbci	r17, 0xFF	; 255
    16f2:	06 c0       	rjmp	.+12     	; 0x1700 <vfprintf+0x29c>
    16f4:	60 81       	ld	r22, Z
    16f6:	71 81       	ldd	r23, Z+1	; 0x01
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	0e 5f       	subi	r16, 0xFE	; 254
    16fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1700:	a3 01       	movw	r20, r6
    1702:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__ultoa_invert>
    1706:	88 2e       	mov	r8, r24
    1708:	86 18       	sub	r8, r6
    170a:	fb 2d       	mov	r31, r11
    170c:	ff 77       	andi	r31, 0x7F	; 127
    170e:	3f 2e       	mov	r3, r31
    1710:	36 fe       	sbrs	r3, 6
    1712:	0d c0       	rjmp	.+26     	; 0x172e <vfprintf+0x2ca>
    1714:	23 2d       	mov	r18, r3
    1716:	2e 7f       	andi	r18, 0xFE	; 254
    1718:	a2 2e       	mov	r10, r18
    171a:	89 14       	cp	r8, r9
    171c:	58 f4       	brcc	.+22     	; 0x1734 <vfprintf+0x2d0>
    171e:	34 fe       	sbrs	r3, 4
    1720:	0b c0       	rjmp	.+22     	; 0x1738 <vfprintf+0x2d4>
    1722:	32 fc       	sbrc	r3, 2
    1724:	09 c0       	rjmp	.+18     	; 0x1738 <vfprintf+0x2d4>
    1726:	83 2d       	mov	r24, r3
    1728:	8e 7e       	andi	r24, 0xEE	; 238
    172a:	a8 2e       	mov	r10, r24
    172c:	05 c0       	rjmp	.+10     	; 0x1738 <vfprintf+0x2d4>
    172e:	b8 2c       	mov	r11, r8
    1730:	a3 2c       	mov	r10, r3
    1732:	03 c0       	rjmp	.+6      	; 0x173a <vfprintf+0x2d6>
    1734:	b8 2c       	mov	r11, r8
    1736:	01 c0       	rjmp	.+2      	; 0x173a <vfprintf+0x2d6>
    1738:	b9 2c       	mov	r11, r9
    173a:	a4 fe       	sbrs	r10, 4
    173c:	0f c0       	rjmp	.+30     	; 0x175c <vfprintf+0x2f8>
    173e:	fe 01       	movw	r30, r28
    1740:	e8 0d       	add	r30, r8
    1742:	f1 1d       	adc	r31, r1
    1744:	80 81       	ld	r24, Z
    1746:	80 33       	cpi	r24, 0x30	; 48
    1748:	21 f4       	brne	.+8      	; 0x1752 <vfprintf+0x2ee>
    174a:	9a 2d       	mov	r25, r10
    174c:	99 7e       	andi	r25, 0xE9	; 233
    174e:	a9 2e       	mov	r10, r25
    1750:	09 c0       	rjmp	.+18     	; 0x1764 <vfprintf+0x300>
    1752:	a2 fe       	sbrs	r10, 2
    1754:	06 c0       	rjmp	.+12     	; 0x1762 <vfprintf+0x2fe>
    1756:	b3 94       	inc	r11
    1758:	b3 94       	inc	r11
    175a:	04 c0       	rjmp	.+8      	; 0x1764 <vfprintf+0x300>
    175c:	8a 2d       	mov	r24, r10
    175e:	86 78       	andi	r24, 0x86	; 134
    1760:	09 f0       	breq	.+2      	; 0x1764 <vfprintf+0x300>
    1762:	b3 94       	inc	r11
    1764:	a3 fc       	sbrc	r10, 3
    1766:	11 c0       	rjmp	.+34     	; 0x178a <vfprintf+0x326>
    1768:	a0 fe       	sbrs	r10, 0
    176a:	06 c0       	rjmp	.+12     	; 0x1778 <vfprintf+0x314>
    176c:	b2 14       	cp	r11, r2
    176e:	88 f4       	brcc	.+34     	; 0x1792 <vfprintf+0x32e>
    1770:	28 0c       	add	r2, r8
    1772:	92 2c       	mov	r9, r2
    1774:	9b 18       	sub	r9, r11
    1776:	0e c0       	rjmp	.+28     	; 0x1794 <vfprintf+0x330>
    1778:	b2 14       	cp	r11, r2
    177a:	60 f4       	brcc	.+24     	; 0x1794 <vfprintf+0x330>
    177c:	b6 01       	movw	r22, r12
    177e:	80 e2       	ldi	r24, 0x20	; 32
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	0e 94 29 0c 	call	0x1852	; 0x1852 <fputc>
    1786:	b3 94       	inc	r11
    1788:	f7 cf       	rjmp	.-18     	; 0x1778 <vfprintf+0x314>
    178a:	b2 14       	cp	r11, r2
    178c:	18 f4       	brcc	.+6      	; 0x1794 <vfprintf+0x330>
    178e:	2b 18       	sub	r2, r11
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <vfprintf+0x332>
    1792:	98 2c       	mov	r9, r8
    1794:	21 2c       	mov	r2, r1
    1796:	a4 fe       	sbrs	r10, 4
    1798:	10 c0       	rjmp	.+32     	; 0x17ba <vfprintf+0x356>
    179a:	b6 01       	movw	r22, r12
    179c:	80 e3       	ldi	r24, 0x30	; 48
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	0e 94 29 0c 	call	0x1852	; 0x1852 <fputc>
    17a4:	a2 fe       	sbrs	r10, 2
    17a6:	17 c0       	rjmp	.+46     	; 0x17d6 <vfprintf+0x372>
    17a8:	a1 fc       	sbrc	r10, 1
    17aa:	03 c0       	rjmp	.+6      	; 0x17b2 <vfprintf+0x34e>
    17ac:	88 e7       	ldi	r24, 0x78	; 120
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <vfprintf+0x352>
    17b2:	88 e5       	ldi	r24, 0x58	; 88
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	b6 01       	movw	r22, r12
    17b8:	0c c0       	rjmp	.+24     	; 0x17d2 <vfprintf+0x36e>
    17ba:	8a 2d       	mov	r24, r10
    17bc:	86 78       	andi	r24, 0x86	; 134
    17be:	59 f0       	breq	.+22     	; 0x17d6 <vfprintf+0x372>
    17c0:	a1 fe       	sbrs	r10, 1
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <vfprintf+0x364>
    17c4:	8b e2       	ldi	r24, 0x2B	; 43
    17c6:	01 c0       	rjmp	.+2      	; 0x17ca <vfprintf+0x366>
    17c8:	80 e2       	ldi	r24, 0x20	; 32
    17ca:	a7 fc       	sbrc	r10, 7
    17cc:	8d e2       	ldi	r24, 0x2D	; 45
    17ce:	b6 01       	movw	r22, r12
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	0e 94 29 0c 	call	0x1852	; 0x1852 <fputc>
    17d6:	89 14       	cp	r8, r9
    17d8:	38 f4       	brcc	.+14     	; 0x17e8 <vfprintf+0x384>
    17da:	b6 01       	movw	r22, r12
    17dc:	80 e3       	ldi	r24, 0x30	; 48
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	0e 94 29 0c 	call	0x1852	; 0x1852 <fputc>
    17e4:	9a 94       	dec	r9
    17e6:	f7 cf       	rjmp	.-18     	; 0x17d6 <vfprintf+0x372>
    17e8:	8a 94       	dec	r8
    17ea:	f3 01       	movw	r30, r6
    17ec:	e8 0d       	add	r30, r8
    17ee:	f1 1d       	adc	r31, r1
    17f0:	80 81       	ld	r24, Z
    17f2:	b6 01       	movw	r22, r12
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	0e 94 29 0c 	call	0x1852	; 0x1852 <fputc>
    17fa:	81 10       	cpse	r8, r1
    17fc:	f5 cf       	rjmp	.-22     	; 0x17e8 <vfprintf+0x384>
    17fe:	22 20       	and	r2, r2
    1800:	09 f4       	brne	.+2      	; 0x1804 <vfprintf+0x3a0>
    1802:	42 ce       	rjmp	.-892    	; 0x1488 <vfprintf+0x24>
    1804:	b6 01       	movw	r22, r12
    1806:	80 e2       	ldi	r24, 0x20	; 32
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	0e 94 29 0c 	call	0x1852	; 0x1852 <fputc>
    180e:	2a 94       	dec	r2
    1810:	f6 cf       	rjmp	.-20     	; 0x17fe <vfprintf+0x39a>
    1812:	f6 01       	movw	r30, r12
    1814:	86 81       	ldd	r24, Z+6	; 0x06
    1816:	97 81       	ldd	r25, Z+7	; 0x07
    1818:	02 c0       	rjmp	.+4      	; 0x181e <vfprintf+0x3ba>
    181a:	8f ef       	ldi	r24, 0xFF	; 255
    181c:	9f ef       	ldi	r25, 0xFF	; 255
    181e:	2b 96       	adiw	r28, 0x0b	; 11
    1820:	e2 e1       	ldi	r30, 0x12	; 18
    1822:	0c 94 df 0c 	jmp	0x19be	; 0x19be <__epilogue_restores__>

00001826 <strnlen_P>:
    1826:	fc 01       	movw	r30, r24
    1828:	05 90       	lpm	r0, Z+
    182a:	61 50       	subi	r22, 0x01	; 1
    182c:	70 40       	sbci	r23, 0x00	; 0
    182e:	01 10       	cpse	r0, r1
    1830:	d8 f7       	brcc	.-10     	; 0x1828 <strnlen_P+0x2>
    1832:	80 95       	com	r24
    1834:	90 95       	com	r25
    1836:	8e 0f       	add	r24, r30
    1838:	9f 1f       	adc	r25, r31
    183a:	08 95       	ret

0000183c <strnlen>:
    183c:	fc 01       	movw	r30, r24
    183e:	61 50       	subi	r22, 0x01	; 1
    1840:	70 40       	sbci	r23, 0x00	; 0
    1842:	01 90       	ld	r0, Z+
    1844:	01 10       	cpse	r0, r1
    1846:	d8 f7       	brcc	.-10     	; 0x183e <strnlen+0x2>
    1848:	80 95       	com	r24
    184a:	90 95       	com	r25
    184c:	8e 0f       	add	r24, r30
    184e:	9f 1f       	adc	r25, r31
    1850:	08 95       	ret

00001852 <fputc>:
    1852:	0f 93       	push	r16
    1854:	1f 93       	push	r17
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	fb 01       	movw	r30, r22
    185c:	23 81       	ldd	r18, Z+3	; 0x03
    185e:	21 fd       	sbrc	r18, 1
    1860:	03 c0       	rjmp	.+6      	; 0x1868 <fputc+0x16>
    1862:	8f ef       	ldi	r24, 0xFF	; 255
    1864:	9f ef       	ldi	r25, 0xFF	; 255
    1866:	2c c0       	rjmp	.+88     	; 0x18c0 <fputc+0x6e>
    1868:	22 ff       	sbrs	r18, 2
    186a:	16 c0       	rjmp	.+44     	; 0x1898 <fputc+0x46>
    186c:	46 81       	ldd	r20, Z+6	; 0x06
    186e:	57 81       	ldd	r21, Z+7	; 0x07
    1870:	24 81       	ldd	r18, Z+4	; 0x04
    1872:	35 81       	ldd	r19, Z+5	; 0x05
    1874:	42 17       	cp	r20, r18
    1876:	53 07       	cpc	r21, r19
    1878:	44 f4       	brge	.+16     	; 0x188a <fputc+0x38>
    187a:	a0 81       	ld	r26, Z
    187c:	b1 81       	ldd	r27, Z+1	; 0x01
    187e:	9d 01       	movw	r18, r26
    1880:	2f 5f       	subi	r18, 0xFF	; 255
    1882:	3f 4f       	sbci	r19, 0xFF	; 255
    1884:	31 83       	std	Z+1, r19	; 0x01
    1886:	20 83       	st	Z, r18
    1888:	8c 93       	st	X, r24
    188a:	26 81       	ldd	r18, Z+6	; 0x06
    188c:	37 81       	ldd	r19, Z+7	; 0x07
    188e:	2f 5f       	subi	r18, 0xFF	; 255
    1890:	3f 4f       	sbci	r19, 0xFF	; 255
    1892:	37 83       	std	Z+7, r19	; 0x07
    1894:	26 83       	std	Z+6, r18	; 0x06
    1896:	14 c0       	rjmp	.+40     	; 0x18c0 <fputc+0x6e>
    1898:	8b 01       	movw	r16, r22
    189a:	ec 01       	movw	r28, r24
    189c:	fb 01       	movw	r30, r22
    189e:	00 84       	ldd	r0, Z+8	; 0x08
    18a0:	f1 85       	ldd	r31, Z+9	; 0x09
    18a2:	e0 2d       	mov	r30, r0
    18a4:	09 95       	icall
    18a6:	89 2b       	or	r24, r25
    18a8:	e1 f6       	brne	.-72     	; 0x1862 <fputc+0x10>
    18aa:	d8 01       	movw	r26, r16
    18ac:	16 96       	adiw	r26, 0x06	; 6
    18ae:	8d 91       	ld	r24, X+
    18b0:	9c 91       	ld	r25, X
    18b2:	17 97       	sbiw	r26, 0x07	; 7
    18b4:	01 96       	adiw	r24, 0x01	; 1
    18b6:	17 96       	adiw	r26, 0x07	; 7
    18b8:	9c 93       	st	X, r25
    18ba:	8e 93       	st	-X, r24
    18bc:	16 97       	sbiw	r26, 0x06	; 6
    18be:	ce 01       	movw	r24, r28
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	1f 91       	pop	r17
    18c6:	0f 91       	pop	r16
    18c8:	08 95       	ret

000018ca <__ultoa_invert>:
    18ca:	fa 01       	movw	r30, r20
    18cc:	aa 27       	eor	r26, r26
    18ce:	28 30       	cpi	r18, 0x08	; 8
    18d0:	51 f1       	breq	.+84     	; 0x1926 <__ultoa_invert+0x5c>
    18d2:	20 31       	cpi	r18, 0x10	; 16
    18d4:	81 f1       	breq	.+96     	; 0x1936 <__ultoa_invert+0x6c>
    18d6:	e8 94       	clt
    18d8:	6f 93       	push	r22
    18da:	6e 7f       	andi	r22, 0xFE	; 254
    18dc:	6e 5f       	subi	r22, 0xFE	; 254
    18de:	7f 4f       	sbci	r23, 0xFF	; 255
    18e0:	8f 4f       	sbci	r24, 0xFF	; 255
    18e2:	9f 4f       	sbci	r25, 0xFF	; 255
    18e4:	af 4f       	sbci	r26, 0xFF	; 255
    18e6:	b1 e0       	ldi	r27, 0x01	; 1
    18e8:	3e d0       	rcall	.+124    	; 0x1966 <__ultoa_invert+0x9c>
    18ea:	b4 e0       	ldi	r27, 0x04	; 4
    18ec:	3c d0       	rcall	.+120    	; 0x1966 <__ultoa_invert+0x9c>
    18ee:	67 0f       	add	r22, r23
    18f0:	78 1f       	adc	r23, r24
    18f2:	89 1f       	adc	r24, r25
    18f4:	9a 1f       	adc	r25, r26
    18f6:	a1 1d       	adc	r26, r1
    18f8:	68 0f       	add	r22, r24
    18fa:	79 1f       	adc	r23, r25
    18fc:	8a 1f       	adc	r24, r26
    18fe:	91 1d       	adc	r25, r1
    1900:	a1 1d       	adc	r26, r1
    1902:	6a 0f       	add	r22, r26
    1904:	71 1d       	adc	r23, r1
    1906:	81 1d       	adc	r24, r1
    1908:	91 1d       	adc	r25, r1
    190a:	a1 1d       	adc	r26, r1
    190c:	20 d0       	rcall	.+64     	; 0x194e <__ultoa_invert+0x84>
    190e:	09 f4       	brne	.+2      	; 0x1912 <__ultoa_invert+0x48>
    1910:	68 94       	set
    1912:	3f 91       	pop	r19
    1914:	2a e0       	ldi	r18, 0x0A	; 10
    1916:	26 9f       	mul	r18, r22
    1918:	11 24       	eor	r1, r1
    191a:	30 19       	sub	r19, r0
    191c:	30 5d       	subi	r19, 0xD0	; 208
    191e:	31 93       	st	Z+, r19
    1920:	de f6       	brtc	.-74     	; 0x18d8 <__ultoa_invert+0xe>
    1922:	cf 01       	movw	r24, r30
    1924:	08 95       	ret
    1926:	46 2f       	mov	r20, r22
    1928:	47 70       	andi	r20, 0x07	; 7
    192a:	40 5d       	subi	r20, 0xD0	; 208
    192c:	41 93       	st	Z+, r20
    192e:	b3 e0       	ldi	r27, 0x03	; 3
    1930:	0f d0       	rcall	.+30     	; 0x1950 <__ultoa_invert+0x86>
    1932:	c9 f7       	brne	.-14     	; 0x1926 <__ultoa_invert+0x5c>
    1934:	f6 cf       	rjmp	.-20     	; 0x1922 <__ultoa_invert+0x58>
    1936:	46 2f       	mov	r20, r22
    1938:	4f 70       	andi	r20, 0x0F	; 15
    193a:	40 5d       	subi	r20, 0xD0	; 208
    193c:	4a 33       	cpi	r20, 0x3A	; 58
    193e:	18 f0       	brcs	.+6      	; 0x1946 <__ultoa_invert+0x7c>
    1940:	49 5d       	subi	r20, 0xD9	; 217
    1942:	31 fd       	sbrc	r19, 1
    1944:	40 52       	subi	r20, 0x20	; 32
    1946:	41 93       	st	Z+, r20
    1948:	02 d0       	rcall	.+4      	; 0x194e <__ultoa_invert+0x84>
    194a:	a9 f7       	brne	.-22     	; 0x1936 <__ultoa_invert+0x6c>
    194c:	ea cf       	rjmp	.-44     	; 0x1922 <__ultoa_invert+0x58>
    194e:	b4 e0       	ldi	r27, 0x04	; 4
    1950:	a6 95       	lsr	r26
    1952:	97 95       	ror	r25
    1954:	87 95       	ror	r24
    1956:	77 95       	ror	r23
    1958:	67 95       	ror	r22
    195a:	ba 95       	dec	r27
    195c:	c9 f7       	brne	.-14     	; 0x1950 <__ultoa_invert+0x86>
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	61 05       	cpc	r22, r1
    1962:	71 05       	cpc	r23, r1
    1964:	08 95       	ret
    1966:	9b 01       	movw	r18, r22
    1968:	ac 01       	movw	r20, r24
    196a:	0a 2e       	mov	r0, r26
    196c:	06 94       	lsr	r0
    196e:	57 95       	ror	r21
    1970:	47 95       	ror	r20
    1972:	37 95       	ror	r19
    1974:	27 95       	ror	r18
    1976:	ba 95       	dec	r27
    1978:	c9 f7       	brne	.-14     	; 0x196c <__ultoa_invert+0xa2>
    197a:	62 0f       	add	r22, r18
    197c:	73 1f       	adc	r23, r19
    197e:	84 1f       	adc	r24, r20
    1980:	95 1f       	adc	r25, r21
    1982:	a0 1d       	adc	r26, r0
    1984:	08 95       	ret

00001986 <__prologue_saves__>:
    1986:	2f 92       	push	r2
    1988:	3f 92       	push	r3
    198a:	4f 92       	push	r4
    198c:	5f 92       	push	r5
    198e:	6f 92       	push	r6
    1990:	7f 92       	push	r7
    1992:	8f 92       	push	r8
    1994:	9f 92       	push	r9
    1996:	af 92       	push	r10
    1998:	bf 92       	push	r11
    199a:	cf 92       	push	r12
    199c:	df 92       	push	r13
    199e:	ef 92       	push	r14
    19a0:	ff 92       	push	r15
    19a2:	0f 93       	push	r16
    19a4:	1f 93       	push	r17
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	ca 1b       	sub	r28, r26
    19b0:	db 0b       	sbc	r29, r27
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	de bf       	out	0x3e, r29	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	cd bf       	out	0x3d, r28	; 61
    19bc:	09 94       	ijmp

000019be <__epilogue_restores__>:
    19be:	2a 88       	ldd	r2, Y+18	; 0x12
    19c0:	39 88       	ldd	r3, Y+17	; 0x11
    19c2:	48 88       	ldd	r4, Y+16	; 0x10
    19c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    19c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    19c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    19ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    19cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    19ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    19d0:	b9 84       	ldd	r11, Y+9	; 0x09
    19d2:	c8 84       	ldd	r12, Y+8	; 0x08
    19d4:	df 80       	ldd	r13, Y+7	; 0x07
    19d6:	ee 80       	ldd	r14, Y+6	; 0x06
    19d8:	fd 80       	ldd	r15, Y+5	; 0x05
    19da:	0c 81       	ldd	r16, Y+4	; 0x04
    19dc:	1b 81       	ldd	r17, Y+3	; 0x03
    19de:	aa 81       	ldd	r26, Y+2	; 0x02
    19e0:	b9 81       	ldd	r27, Y+1	; 0x01
    19e2:	ce 0f       	add	r28, r30
    19e4:	d1 1d       	adc	r29, r1
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	ed 01       	movw	r28, r26
    19f2:	08 95       	ret

000019f4 <_exit>:
    19f4:	f8 94       	cli

000019f6 <__stop_program>:
    19f6:	ff cf       	rjmp	.-2      	; 0x19f6 <__stop_program>
